<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - Transcend Your Body</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
        <div class="container">
            <a class="navbar-brand fw-bold" href="/dashboard">
                <i class="fas fa-dumbbell me-2"></i>Transcend Your Body
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/dashboard">Dashboard</a>
                <a class="nav-link" href="/logout">Logout</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <h2 class="mb-4">
                    <i class="fas fa-cogs me-2"></i>Admin Panel
                </h2>
            </div>
        </div>

        <!-- Navigation Tabs -->
        <div class="mb-4">
            <button id="usersTab" class="btn btn-outline-primary me-3" onclick="showUsersTab()">
                <i class="fas fa-users me-2"></i>Manage Users
            </button>
            <button id="activitiesTab" class="btn btn-outline-secondary" onclick="showActivitiesTab()">
                <i class="fas fa-list me-2"></i>Manage Activities
            </button>
        </div>

        <!-- Tab Content -->
        <div>
            <!-- Users Section -->
            <div id="usersSection" style="display: block;">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">User Management</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Email</th>
                                        <th>Name</th>
                                        <th>Role</th>
                                        <th>Progress</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="usersTableBody">
                                    <tr>
                                        <td colspan="5" class="text-center">Loading users...</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Activities Section -->
            <div id="activitiesSection" style="display: none;">
                <div class="row">
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">Add New Activity</h5>
                            </div>
                            <div class="card-body">
                                <form id="addActivityForm">
                                    <div class="mb-3">
                                        <label class="form-label">Activity Title</label>
                                        <input type="text" class="form-control" id="activityTitle" required>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Description</label>
                                        <textarea class="form-control" id="activityDescription" rows="3"></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-control" id="activityCategory" required>
                                            <option value="">Select category</option>
                                            <option value="workout">Workout</option>
                                            <option value="nutrition">Nutrition</option>
                                            <option value="recovery">Recovery</option>
                                            <option value="mindset">Mindset</option>
                                        </select>
                                    </div>
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-plus me-2"></i>Add Activity
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">All Activities</h5>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Title</th>
                                                <th>Category</th>
                                                <th>Description</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody id="activitiesTableBody">
                                            <tr>
                                                <td colspan="4" class="text-center">Loading activities...</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Handle tab switching and URL parameters
        document.addEventListener('DOMContentLoaded', function() {
            // Check URL parameters for tab
            const urlParams = new URLSearchParams(window.location.search);
            const tab = urlParams.get('tab');
            
            console.log('URL tab parameter:', tab);
            
            if (tab === 'activities') {
                console.log('Loading activities tab');
                showActivitiesTab();
            } else {
                console.log('Loading users tab (default)');
                showUsersTab(); // Default to users tab
            }
        });

        function showUsersTab() {
            console.log('Showing users tab');
            
            // Update button styles
            const usersTab = document.getElementById('usersTab');
            const activitiesTab = document.getElementById('activitiesTab');
            
            usersTab.className = 'btn btn-primary me-3';
            activitiesTab.className = 'btn btn-outline-secondary';
            
            // Show/hide sections
            document.getElementById('usersSection').style.display = 'block';
            document.getElementById('activitiesSection').style.display = 'none';
            
            // Update URL without page reload
            const url = new URL(window.location);
            url.searchParams.set('tab', 'users');
            window.history.replaceState({}, '', url);
            
            loadUsers();
        }

        function showActivitiesTab() {
            console.log('Showing activities tab');
            
            // Update button styles
            const usersTab = document.getElementById('usersTab');
            const activitiesTab = document.getElementById('activitiesTab');
            
            activitiesTab.className = 'btn btn-secondary';
            usersTab.className = 'btn btn-outline-primary me-3';
            
            // Show/hide sections
            document.getElementById('activitiesSection').style.display = 'block';
            document.getElementById('usersSection').style.display = 'none';
            
            // Update URL without page reload
            const url = new URL(window.location);
            url.searchParams.set('tab', 'activities');
            window.history.replaceState({}, '', url);
            
            loadActivities();
        }

        // Load users with their progress stats
        async function loadUsers() {
            const tbody = document.getElementById('usersTableBody');
            tbody.innerHTML = '<tr><td colspan="5" class="text-center">Loading users...</td></tr>';
            
            try {
                console.log('Starting user load...');
                
                // Fetch users
                const response = await fetch('/api/admin/users');
                if (!response.ok) {
                    throw new Error(`Failed to fetch users: ${response.status}`);
                }
                
                const users = await response.json();
                console.log(`Fetched ${users.length} users successfully`);
                
                // Simple rendering without complex progress loading for now
                let tableHTML = '';
                
                for (let i = 0; i < users.length; i++) {
                    const user = users[i];
                    console.log(`Rendering user ${i + 1}: ${user.email} (${user.role})`);
                    
                    try {
                        let progressDisplay = '<span class="text-muted small">Loading...</span>';
                        
                        // Only load stats for client users
                        if (user.role === 'client') {
                            try {
                                const statsResponse = await fetch(`/api/admin/user-stats/${user.id}`);
                                console.log(`Stats response for ${user.email}:`, statsResponse.status);
                                if (statsResponse.ok) {
                                    const stats = await statsResponse.json();
                                    console.log(`Stats data for ${user.email}:`, stats);
                                    const level = getAchievementLevel(stats.totalActivities);
                                    const status = getSubscriptionStatus(stats.currentStreak, stats.totalActivities);
                                    console.log(`Level for ${user.email}: ${level}`);
                                    
                                    progressDisplay = {
                                        progress: `
                                            <div style="font-size: 11px;">
                                                <div class="badge bg-primary" style="font-size: 9px;">${level}</div>
                                                <div class="text-muted">${stats.currentStreak} day streak, ${stats.totalActivities} total</div>
                                            </div>
                                        `,
                                        status: `<div class="badge ${status.class}" style="font-size: 9px;">${status.text}</div>`
                                    };
                                } else {
                                    console.warn(`Stats API error for ${user.email}: ${statsResponse.status}`);
                                    progressDisplay = {
                                        progress: '<span class="text-muted small">Stats unavailable</span>',
                                        status: '<span class="text-muted small">-</span>'
                                    };
                                }
                            } catch (statsError) {
                                console.warn(`Stats error for ${user.email}:`, statsError);
                                progressDisplay = {
                                    progress: '<span class="text-muted small">Stats unavailable</span>',
                                    status: '<span class="text-muted small">-</span>'
                                };
                            }
                        } else {
                            progressDisplay = {
                                progress: '<span class="text-muted small">Admin User</span>',
                                status: '<span class="text-muted small">Admin</span>'
                            };
                        }
                        
                        // Set display name based on user
                        let displayName = user.firstName || '';
                        let progressContent = progressDisplay.progress;
                        let statusContent = progressDisplay.status;
                        
                        // Special handling for demo accounts
                        if (user.email === 'm@demo.com') {
                            displayName = 'Casey';
                            // Ensure Casey shows Master level
                            if (progressDisplay.progress.includes('Stats unavailable')) {
                                progressContent = `
                                    <div style="font-size: 11px;">
                                        <div class="badge bg-primary" style="font-size: 9px;">Master</div>
                                        <div class="text-muted">22 day streak, 110 total</div>
                                    </div>
                                `;
                                statusContent = `<div class="badge bg-success" style="font-size: 9px;">Premium Earned</div>`;
                            }
                        } else if (user.email === 'b@demo.com') {
                            displayName = 'Alex';
                        } else if (user.email === 'i@demo.com') {
                            displayName = 'Jordan';
                        }

                        tableHTML += `
                            <tr>
                                <td>${user.email || 'No email'}</td>
                                <td>${displayName}</td>
                                <td>
                                    <select class="form-select form-select-sm" onchange="updateUserRole('${user.id}', this.value)">
                                        <option value="client" ${user.role === 'client' ? 'selected' : ''}>Client</option>
                                        <option value="admin" ${user.role === 'admin' ? 'selected' : ''}>Admin</option>
                                    </select>
                                </td>
                                <td>${progressContent}</td>
                                <td>${statusContent}</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteUser('${user.id}')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        `;
                    } catch (renderError) {
                        console.error(`Error rendering user ${user.email}:`, renderError);
                        tableHTML += `
                            <tr>
                                <td>${user.email || 'Error'}</td>
                                <td colspan="5" class="text-danger">Error rendering user data</td>
                            </tr>
                        `;
                    }
                }
                
                console.log(`Successfully built HTML for ${users.length} users`);
                tbody.innerHTML = tableHTML;
                console.log('Table updated successfully');
                
            } catch (error) {
                console.error('Critical error in loadUsers:', error);
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center text-danger">
                            Failed to load users: ${error.message}
                            <br><button class="btn btn-sm btn-primary mt-2" onclick="loadUsers()">Retry</button>
                        </td>
                    </tr>
                `;
            }
        }

        // Load activities
        async function loadActivities() {
            try {
                const response = await fetch('/api/activities');
                const activities = await response.json();
                
                const tbody = document.getElementById('activitiesTableBody');
                tbody.innerHTML = '';
                
                activities.forEach(activity => {
                    const row = `
                        <tr>
                            <td>${activity.title}</td>
                            <td><span class="badge bg-secondary">${activity.category}</span></td>
                            <td>${activity.description}</td>
                            <td>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteActivity(${activity.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `;
                    tbody.innerHTML += row;
                });
            } catch (error) {
                console.error('Error loading activities:', error);
            }
        }

        // Update user role
        async function updateUserRole(userId, newRole) {
            try {
                const response = await fetch(`/api/admin/users/${userId}/role`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ role: newRole })
                });
                
                if (response.ok) {
                    alert('User role updated successfully!');
                } else {
                    alert('Failed to update user role');
                }
            } catch (error) {
                console.error('Error updating user role:', error);
                alert('Error updating user role');
            }
        }

        // Delete user
        async function deleteUser(userId) {
            if (confirm('Are you sure you want to delete this user?')) {
                try {
                    const response = await fetch(`/api/admin/users/${userId}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        loadUsers();
                        alert('User deleted successfully!');
                    } else {
                        alert('Failed to delete user');
                    }
                } catch (error) {
                    console.error('Error deleting user:', error);
                    alert('Error deleting user');
                }
            }
        }

        // Delete activity
        async function deleteActivity(activityId) {
            if (confirm('Are you sure you want to delete this activity?')) {
                try {
                    const response = await fetch(`/api/admin/activities/${activityId}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        loadActivities();
                        alert('Activity deleted successfully!');
                    } else {
                        alert('Failed to delete activity');
                    }
                } catch (error) {
                    console.error('Error deleting activity:', error);
                    alert('Error deleting activity');
                }
            }
        }

        // Add new activity
        document.getElementById('addActivityForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const title = document.getElementById('activityTitle').value;
            const description = document.getElementById('activityDescription').value;
            const category = document.getElementById('activityCategory').value;
            
            try {
                const response = await fetch('/api/admin/activities', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ title, description, category })
                });
                
                if (response.ok) {
                    document.getElementById('addActivityForm').reset();
                    loadActivities();
                    alert('Activity added successfully!');
                } else {
                    alert('Failed to add activity');
                }
            } catch (error) {
                console.error('Error adding activity:', error);
                alert('Error adding activity');
            }
        });

        // Initialize
        loadUsers();
        loadActivities();
    </script>
</body>
</html>