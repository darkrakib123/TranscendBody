<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - Transcend Your Body</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
        <div class="container">
            <a class="navbar-brand fw-bold" href="/dashboard">
                <i class="fas fa-dumbbell me-2"></i>Transcend Your Body
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/dashboard">Dashboard</a>
                <a class="nav-link" href="/logout">Logout</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <h2 class="mb-4">
                    <i class="fas fa-cogs me-2"></i>Admin Panel
                </h2>
            </div>
        </div>

        <!-- Navigation Tabs -->
        <div class="mb-4">
            <button id="usersTab" class="btn btn-outline-primary me-3" onclick="showUsersTab()">
                <i class="fas fa-users me-2"></i>Manage Users
            </button>
            <button id="activitiesTab" class="btn btn-outline-secondary" onclick="showActivitiesTab()">
                <i class="fas fa-list me-2"></i>Manage Activities
            </button>
        </div>

        <!-- Tab Content -->
        <div>
            <!-- Users Section -->
            <div id="usersSection" style="display: block;">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">User Management</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Email</th>
                                        <th>Name</th>
                                        <th>Plan</th>
                                        <th>Tier</th>
                                        <th>Accountability Level</th>
                                        <th>Activities Completed</th>
                                        <th>Current Streak</th>
                                        <th>Role</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="usersTableBody">
                                    <tr>
                                        <td colspan="7" class="text-center">Loading users...</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Activities Section -->
            <div id="activitiesSection" style="display: none;">
                <div class="row">
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">Add New Activity</h5>
                            </div>
                            <div class="card-body">
                                <form id="addActivityForm">
                                    <div class="mb-3">
                                        <label class="form-label">Activity Title</label>
                                        <input type="text" class="form-control" id="activityTitle" required>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Description</label>
                                        <textarea class="form-control" id="activityDescription" rows="3"></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-control" id="activityCategory" required>
                                            <option value="">Select category</option>
                                            <option value="workout">Workout</option>
                                            <option value="nutrition">Nutrition</option>
                                            <option value="recovery">Recovery</option>
                                            <option value="mindset">Mindset</option>
                                        </select>
                                    </div>
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-plus me-2"></i>Add Activity
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">All Activities</h5>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Title</th>
                                                <th>Category</th>
                                                <th>Description</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody id="activitiesTableBody">
                                            <tr>
                                                <td colspan="4" class="text-center">Loading activities...</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Activity Modal -->
    <div class="modal fade" id="editActivityModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Edit Activity</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <form id="editActivityForm">
              <input type="hidden" id="editActivityId">
              <div class="mb-3">
                <label class="form-label">Activity Title</label>
                <input type="text" class="form-control" id="editActivityTitle" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Description</label>
                <textarea class="form-control" id="editActivityDescription" rows="3"></textarea>
              </div>
              <div class="mb-3">
                <label class="form-label">Category</label>
                <select class="form-control" id="editActivityCategory" required>
                  <option value="">Select category</option>
                  <option value="workout">Workout</option>
                  <option value="nutrition">Nutrition</option>
                  <option value="recovery">Recovery</option>
                  <option value="mindset">Mindset</option>
                </select>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" onclick="saveActivityEdit()">Save Changes</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Add Bootstrap Offcanvas for user edit drawer -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="editUserDrawer" aria-labelledby="editUserDrawerLabel">
      <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="editUserDrawerLabel">Edit User</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
      </div>
      <div class="offcanvas-body">
        <form id="editUserForm">
          <div class="mb-3">
            <label class="form-label">Email</label>
            <input type="email" class="form-control" id="editUserEmail" readonly style="background-color: #f1f1f1; color: #888;">
          </div>
          <div class="mb-3">
            <label class="form-label">First Name</label>
            <input type="text" class="form-control" id="editUserFirstName">
          </div>
          <div class="mb-3">
            <label class="form-label">Last Name</label>
            <input type="text" class="form-control" id="editUserLastName">
          </div>
          <div class="mb-3">
            <label class="form-label">Preferred Name</label>
            <input type="text" class="form-control" id="editUserPreferredName">
          </div>
          <div class="mb-3">
            <label class="form-label">Gender</label>
            <select class="form-control" id="editUserGender">
              <option value="">Select gender</option>
              <option value="male">Male</option>
              <option value="female">Female</option>
              <option value="nonbinary">Nonbinary</option>
              <option value="other">Other</option>
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Age</label>
            <input type="number" class="form-control" id="editUserAge" min="0">
          </div>
          <div class="mb-3">
            <label class="form-label">Role</label>
            <select class="form-control" id="editUserRole" required>
              <option value="user">User</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Plan</label>
            <select class="form-control" id="editUserPlan">
              <option value="trial">Trial</option>
              <option value="basic">Basic</option>
              <option value="pro">Pro</option>
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Accountability Level</label>
            <select class="form-control" id="editUserAccountabilityLevel">
              <option value="beginner">Beginner</option>
              <option value="intermediate">Intermediate</option>
              <option value="master">Master</option>
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Tier</label>
            <select class="form-control" id="editUserTier">
              <option value="bronze">Bronze</option>
              <option value="silver">Silver</option>
              <option value="gold">Gold</option>
            </select>
          </div>
          <hr>
          <div class="mb-3">
            <label class="form-label">Created At</label>
            <input type="text" class="form-control" id="editUserCreatedAt" readonly style="background-color: #f1f1f1; color: #888;">
          </div>
          <div class="mb-3">
            <label class="form-label">Updated At</label>
            <input type="text" class="form-control" id="editUserUpdatedAt" readonly style="background-color: #f1f1f1; color: #888;">
          </div>
        </form>
      </div>
      <div class="offcanvas-footer p-3 border-top text-end">
        <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="offcanvas">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="saveUserEdit(currentEditUserId)">Save Changes</button>
      </div>
    </div>

    <!-- Confirmation Modal for Reset Demo Data -->
    <div class="modal fade" id="resetDemoModal" tabindex="-1" aria-labelledby="resetDemoModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="resetDemoModalLabel">Reset Demo Data</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p>Are you sure you want to reset all demo data? This will erase and reseed all demo users, trackers, and entries. This action cannot be undone.</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-danger" id="confirmResetDemoBtn">Yes, Reset</button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/modal.js"></script>
    <script>
        // Handle tab switching and URL parameters
        document.addEventListener('DOMContentLoaded', function() {
            // Check URL parameters for tab
            const urlParams = new URLSearchParams(window.location.search);
            const tab = urlParams.get('tab');
            
            console.log('URL tab parameter:', tab);
            
            if (tab === 'activities') {
                console.log('Loading activities tab');
                showActivitiesTab();
            } else {
                console.log('Loading users tab (default)');
                showUsersTab(); // Default to users tab
            }

            const resetBtn = document.getElementById('resetDemoDataBtn');
            const confirmBtn = document.getElementById('confirmResetDemoBtn');
            if (resetBtn && confirmBtn) {
                resetBtn.addEventListener('click', function() {
                    const modal = new bootstrap.Modal(document.getElementById('resetDemoModal'));
                    modal.show();
                });
                confirmBtn.addEventListener('click', async function() {
                    confirmBtn.disabled = true;
                    confirmBtn.textContent = 'Resetting...';
                    try {
                        const response = await fetch('/api/admin/reset-demo-data', { method: 'POST' });
                        if (response.ok) {
                            location.reload();
                        } else {
                            const data = await response.json();
                            alert('Failed to reset demo data: ' + (data.error || 'Unknown error'));
                        }
                    } catch (err) {
                        alert('Failed to reset demo data: ' + err);
                    } finally {
                        confirmBtn.disabled = false;
                        confirmBtn.textContent = 'Yes, Reset';
                    }
                });
            }
        });

        function showUsersTab() {
            console.log('Showing users tab');
            
            // Update button styles
            const usersTab = document.getElementById('usersTab');
            const activitiesTab = document.getElementById('activitiesTab');
            
            usersTab.className = 'btn btn-primary me-3';
            activitiesTab.className = 'btn btn-outline-secondary';
            
            // Show/hide sections
            document.getElementById('usersSection').style.display = 'block';
            document.getElementById('activitiesSection').style.display = 'none';
            
            // Update URL without page reload
            const url = new URL(window.location);
            url.searchParams.set('tab', 'users');
            window.history.replaceState({}, '', url);
            
            loadUsers();
        }

        function showActivitiesTab() {
            console.log('Showing activities tab');
            
            // Update button styles
            const usersTab = document.getElementById('usersTab');
            const activitiesTab = document.getElementById('activitiesTab');
            
            activitiesTab.className = 'btn btn-secondary';
            usersTab.className = 'btn btn-outline-primary me-3';
            
            // Show/hide sections
            document.getElementById('activitiesSection').style.display = 'block';
            document.getElementById('usersSection').style.display = 'none';
            
            // Update URL without page reload
            const url = new URL(window.location);
            url.searchParams.set('tab', 'activities');
            window.history.replaceState({}, '', url);
            
            loadActivities();
        }

        // Load users with their progress stats
        async function loadUsers() {
            const tbody = document.getElementById('usersTableBody');
            tbody.innerHTML = '<tr><td colspan="7" class="text-center">Loading users...</td></tr>';
            
            try {
                console.log('Starting user load...');
                
                // Fetch users
                const response = await fetch('/api/admin/user-stats');
                if (!response.ok) {
                    throw new Error(`Failed to fetch user stats: ${response.status}`);
                }
                
                const users = await response.json();
                console.log(`Fetched ${users.length} users successfully`);
                
                let tableHTML = '';
                
                for (const user of users) {
                    console.log(`Rendering user ${user.email} (${user.role})`);
                    
                    try {
                        tableHTML += `
                            <tr>
                                <td>${user.email}</td>
                                <td>${user.preferredName || user.firstName}</td>
                                <td>${user.plan}</td>
                                <td>${user.tier}</td>
                                <td>${user.accountabilityLevel}</td>
                                <td>${user.activitiesCompleted}</td>
                                <td>${user.currentStreak}</td>
                                <td>${user.role}</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" onclick="editUser('${user.id}')"><i class="fas fa-edit"></i></button>
                                    <button class="btn btn-danger btn-sm" onclick="deleteUser('${user.id}')"><i class="fas fa-trash"></i></button>
                                </td>
                            </tr>
                        `;
                    } catch (renderError) {
                        console.error(`Error rendering user ${user.email}:`, renderError);
                        tableHTML += `
                            <tr>
                                <td>${user.email || 'Error'}</td>
                                <td colspan="4" class="text-danger">Error rendering user data</td>
                            </tr>
                        `;
                    }
                }
                
                console.log(`Successfully built HTML for ${users.length} users`);
                tbody.innerHTML = tableHTML;
                console.log('Table updated successfully');
                
            } catch (error) {
                console.error('Critical error in loadUsers:', error);
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center text-danger">
                            Failed to load users: ${error.message}
                            <br><button class="btn btn-sm btn-primary mt-2" onclick="loadUsers()">Retry</button>
                        </td>
                    </tr>
                `;
            }
        }

        // Load activities
        async function loadActivities() {
            try {
                const response = await fetch('/api/admin/activities');
                const activities = await response.json();
                
                const tbody = document.getElementById('activitiesTableBody');
                tbody.innerHTML = '';
                
                activities.forEach(activity => {
                    const row = `
                        <tr>
                            <td>${activity.title}</td>
                            <td><span class="badge bg-secondary">${activity.category}</span></td>
                            <td>${activity.description}</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-1" onclick="editActivity(${activity.id}, '${activity.title}', '${activity.category}', '${activity.description}')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteAdminActivity(${activity.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `;
                    tbody.innerHTML += row;
                });
            } catch (error) {
                console.error('Error loading activities:', error);
            }
        }

        // Update user role
        async function updateUserRole(userId, newRole) {
            try {
                const response = await fetch(`/api/admin/users/${userId}/role`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ role: newRole })
                });
                
                if (response.ok) {
                    loadUsers();
                    showAlert('User role updated successfully!', 'success');
                } else {
                    showAlert('Failed to update user role', 'danger');
                }
            } catch (error) {
                console.error('Error updating user role:', error);
                showAlert('Error updating user role', 'danger');
            }
        }

        // Delete user
        async function deleteUser(userId) {
            showConfirmationModal('Are you sure you want to delete this user? This action cannot be undone.', async function() {
                try {
                    const response = await fetch(`/api/admin/users/${userId}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        loadUsers();
                        showAlert('User deleted successfully!', 'success');
                    } else {
                        showAlert('Failed to delete user', 'danger');
                    }
                } catch (error) {
                    console.error('Error deleting user:', error);
                    showAlert('Error deleting user', 'danger');
                }
            });
        }

        // Attach to window for global access
        window.deleteAdminActivity = async function(activityId) {
            showConfirmationModal('Are you sure you want to delete this activity?', async function() {
                try {
                    const response = await fetch(`/api/admin/activities/${activityId}`, {
                        method: 'DELETE'
                    });
                    if (response.ok) {
                        loadActivities();
                        showAlert('Activity deleted successfully!', 'success');
                    } else {
                        showAlert('Failed to delete activity', 'danger');
                    }
                } catch (error) {
                    console.error('Error deleting activity:', error);
                    showAlert('Error deleting activity', 'danger');
                }
            });
        }

        // Add new activity
        document.getElementById('addActivityForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const title = document.getElementById('activityTitle').value;
            const description = document.getElementById('activityDescription').value;
            const category = document.getElementById('activityCategory').value;
            
            try {
                const response = await fetch('/api/admin/activities', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ title, description, category })
                });
                
                if (response.ok) {
                    document.getElementById('addActivityForm').reset();
                    loadActivities();
                    showAlert('Activity added successfully!', 'success');
                } else if (response.status === 400) {
                    const data = await response.json();
                    showAlert(data.error || 'Failed to add activity', 'danger');
                    return;
                } else {
                    showAlert('Failed to add activity', 'danger');
                }
            } catch (error) {
                console.error('Error adding activity:', error);
                showAlert('Error adding activity', 'danger');
            }
        });

        // Helper functions for user progress and status
        function getAchievementLevel(totalActivities) {
            if (totalActivities >= 100) return 'Master';
            if (totalActivities >= 50) return 'Advanced';
            if (totalActivities >= 20) return 'Intermediate';
            if (totalActivities >= 5) return 'Beginner';
            return 'New';
        }

        function getSubscriptionStatus(streak, totalActivities) {
            if (totalActivities >= 50 && streak >= 7) return { text: 'Premium Earned', class: 'success' };
            if (totalActivities >= 20 && streak >= 3) return { text: 'Almost Premium', class: 'warning' };
            return { text: 'Free Tier', class: 'secondary' };
        }

        // Refactor editUser to populate and open the drawer
        let currentEditUserId = null;
        async function editUser(userId) {
            try {
                const response = await fetch(`/api/admin/users/${userId}`);
                if (!response.ok) throw new Error('Failed to fetch user details');
                const user = await response.json();
                currentEditUserId = userId;
                document.getElementById('editUserEmail').value = user.email || '';
                document.getElementById('editUserFirstName').value = user.firstName || '';
                document.getElementById('editUserLastName').value = user.lastName || '';
                document.getElementById('editUserPreferredName').value = user.preferredName || '';
                document.getElementById('editUserGender').value = user.gender || '';
                document.getElementById('editUserAge').value = user.age || '';
                document.getElementById('editUserRole').value = user.role || 'user';
                document.getElementById('editUserPlan').value = user.plan || 'trial';
                document.getElementById('editUserAccountabilityLevel').value = user.accountabilityLevel || 'beginner';
                document.getElementById('editUserTier').value = user.tier || 'bronze';
                document.getElementById('editUserCreatedAt').value = user.createdAt ? new Date(user.createdAt).toLocaleString() : '';
                document.getElementById('editUserUpdatedAt').value = user.updatedAt ? new Date(user.updatedAt).toLocaleString() : '';
                const drawer = new bootstrap.Offcanvas(document.getElementById('editUserDrawer'));
                drawer.show();
            } catch (error) {
                showAlert('Failed to load user details', 'danger');
            }
        }

        // Update saveUserEdit to PATCH all editable fields
        async function saveUserEdit(userId) {
            const firstName = document.getElementById('editUserFirstName').value;
            const lastName = document.getElementById('editUserLastName').value;
            const preferredName = document.getElementById('editUserPreferredName').value;
            const gender = document.getElementById('editUserGender').value;
            const age = parseInt(document.getElementById('editUserAge').value) || null;
            const role = document.getElementById('editUserRole').value;
            const plan = document.getElementById('editUserPlan').value;
            const accountabilityLevel = document.getElementById('editUserAccountabilityLevel').value;
            const tier = document.getElementById('editUserTier').value;
            try {
                const response = await fetch(`/api/admin/users/${userId}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ firstName, lastName, preferredName, gender, age, role, plan, accountabilityLevel, tier })
                });
                if (response.ok) {
                    bootstrap.Offcanvas.getInstance(document.getElementById('editUserDrawer')).hide();
                    loadUsers().then(() => {
                        // Highlight the updated row
                        const row = document.querySelector(`tr[data-user-id='${userId}']`);
                        if (row) {
                            row.classList.add('table-success');
                            setTimeout(() => row.classList.remove('table-success'), 2000);
                        }
                    });
                    showAlert('User updated successfully!', 'success');
                } else {
                    showAlert('Failed to update user', 'danger');
                }
            } catch (error) {
                showAlert('Error updating user', 'danger');
            }
        }

        // Change user role function
        function changeUserRole(userId, currentRole) {
            const newRole = currentRole === 'admin' ? 'user' : 'admin';
            const roleText = newRole === 'admin' ? 'Admin' : 'User';
            showConfirmationModal(`Are you sure you want to change this user's role to ${roleText}?`, function() {
                updateUserRole(userId, newRole);
            });
        }

        // Show alert function
        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alertDiv);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 5000);
        }

        // Edit activity function
        function editActivity(activityId, title, category, description) {
            document.getElementById('editActivityId').value = activityId;
            document.getElementById('editActivityTitle').value = title;
            document.getElementById('editActivityCategory').value = category;
            document.getElementById('editActivityDescription').value = description;

            const modal = new bootstrap.Modal(document.getElementById('editActivityModal'));
            modal.show();
        }

        // Save activity edit
        async function saveActivityEdit() {
            const activityId = document.getElementById('editActivityId').value;
            const title = document.getElementById('editActivityTitle').value;
            const category = document.getElementById('editActivityCategory').value;
            const description = document.getElementById('editActivityDescription').value;

            try {
                const response = await fetch(`/api/admin/activities/${activityId}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ title, category, description })
                });

                if (response.ok) {
                    bootstrap.Modal.getInstance(document.getElementById('editActivityModal')).hide();
                    loadActivities();
                    showAlert('Activity updated successfully!', 'success');
                } else if (response.status === 400) {
                    const data = await response.json();
                    showAlert(data.error || 'Failed to update activity', 'danger');
                    return;
                } else {
                    showAlert('Failed to update activity', 'danger');
                }
            } catch (error) {
                console.error('Error updating activity:', error);
                showAlert('Error updating activity', 'danger');
            }
        }

        // Initialize
        loadUsers();
        loadActivities();
    </script>
</body>
</html>