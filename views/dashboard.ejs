<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Transcend Your Body</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 25px;
        }
        .progress-circle {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: conic-gradient(#28a745 0deg 154.8deg, #e9ecef 154.8deg 360deg);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }
        .progress-circle::before {
            content: '';
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: white;
            position: absolute;
        }
        .progress-text {
            position: relative;
            z-index: 1;
            font-weight: bold;
            color: #333;
        }
        .time-slot-section {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .time-slot-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        .time-icon {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 10px;
        }
        .morning-icon { background-color: #ffc107; }
        .afternoon-icon { background-color: #17a2b8; }
        .evening-icon { background-color: #6f42c1; }
        .activity-item {
            display: flex;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #f0f0f0;
        }
        .activity-item:last-child {
            border-bottom: none;
        }
        .activity-checkbox {
            margin-right: 12px;
        }
        .activity-icon {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 10px;
            font-size: 12px;
        }
        .workout-icon { background-color: #dc3545; color: white; }
        .nutrition-icon { background-color: #fd7e14; color: white; }
        .recovery-icon { background-color: #20c997; color: white; }
        .mindset-icon { background-color: #6f42c1; color: white; }
        .activity-content {
            flex-grow: 1;
        }
        .activity-title {
            font-weight: 600;
            font-size: 14px;
            margin-bottom: 2px;
        }
        .activity-description {
            color: #6c757d;
            font-size: 12px;
        }
        .activity-badge {
            font-size: 10px;
            padding: 2px 6px;
            border-radius: 10px;
            margin-right: 8px;
        }
        .completed {
            text-decoration: line-through;
            opacity: 0.7;
        }
        .sidebar {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .stat-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }
        .stat-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .btn-add {
            background: none;
            border: none;
            color: #007bff;
            font-size: 12px;
            padding: 0;
        }
        .btn-delete {
            background: none;
            border: none;
            color: #dc3545;
            font-size: 12px;
            padding: 0;
        }
        .add-activity-btn {
            background: linear-gradient(135deg, #007bff, #0056b3);
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
        }
        .logout-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            text-decoration: none;
        }
        .logout-btn:hover {
            background: rgba(255,255,255,0.3);
            color: white;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Header Section -->
        <div class="header-section position-relative">
            <a href="/logout" class="logout-btn">
                <i class="fas fa-sign-out-alt me-1"></i> Logout
            </a>
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h2 class="mb-1">Welcome back, <%= user.firstName || 'User' %>!</h2>
                    <p class="mb-0 opacity-75">Today's Tracker - <span id="currentDate"></span></p>
                </div>
                <div class="col-md-4 text-end">
                    <div class="progress-circle">
                        <div class="progress-text">
                            <div style="font-size: 18px;" id="completionPercentage">43%</div>
                            <div style="font-size: 10px;">Complete</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Main Content -->
            <div class="col-lg-8">
                <!-- Morning Section -->
                <div class="time-slot-section">
                    <div class="time-slot-header">
                        <div class="time-icon morning-icon">
                            <i class="fas fa-sun text-white"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h5 class="mb-0">Morning</h5>
                            <small class="text-muted">Start your day right</small>
                        </div>
                        <span class="badge bg-light text-dark me-2">2 of 4 completed</span>
                        <button class="add-activity-btn" onclick="showAddActivityModal('morning')">
                            + Add Activity
                        </button>
                    </div>
                    <div id="morning-activities">
                        <!-- Activities will be loaded dynamically -->
                    </div>
                </div>

                <!-- Afternoon Section -->
                <div class="time-slot-section">
                    <div class="time-slot-header">
                        <div class="time-icon afternoon-icon">
                            <i class="fas fa-sun text-white"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h5 class="mb-0">Afternoon</h5>
                            <small class="text-muted">Keep the momentum going</small>
                        </div>
                        <span class="badge bg-light text-dark me-2">0 of 2 completed</span>
                        <button class="add-activity-btn" onclick="showAddActivityModal('afternoon')">
                            + Add Activity
                        </button>
                    </div>
                    <div id="afternoon-activities">
                        <!-- Activities will be loaded dynamically -->
                    </div>
                </div>

                <!-- Evening Section -->
                <div class="time-slot-section">
                    <div class="time-slot-header">
                        <div class="time-icon evening-icon">
                            <i class="fas fa-moon text-white"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h5 class="mb-0">Evening</h5>
                            <small class="text-muted">Wind down and recover</small>
                        </div>
                        <span class="badge bg-light text-dark me-2">1 of 2 completed</span>
                        <button class="add-activity-btn" onclick="showAddActivityModal('evening')">
                            + Add Activity
                        </button>
                    </div>
                    <div id="evening-activities">
                        <!-- Activities will be loaded dynamically -->
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-lg-4">
                <div class="sidebar">
                    <!-- Progress Dashboard -->
                    <div class="progress-dashboard mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="fw-bold mb-0">Your Progress</h6>
                            <div id="subscriptionStatus" class="badge bg-secondary">Free Plan</div>
                        </div>
                        
                        <!-- Subscription Logic Explanation -->
                        <div class="subscription-info mb-3 p-2" style="background: #f8f9fa; border-radius: 8px; font-size: 11px;">
                            <strong>Earn Premium Access:</strong><br>
                            • <span class="badge bg-secondary" style="font-size: 9px;">Free Plan</span> Complete 3+ daily activities or maintain 1+ day streak<br>
                            • <span class="badge bg-warning" style="font-size: 9px;">Almost Premium</span> Complete 7+ daily activities or maintain 3+ day streak<br>
                            • <span class="badge bg-success" style="font-size: 9px;">Premium Earned</span> Complete 10+ daily activities or maintain 7+ day streak
                        </div>
                        
                        <!-- Streak Progress -->
                        <div class="progress-card mb-3">
                            <div class="d-flex align-items-center justify-content-between mb-2">
                                <div class="d-flex align-items-center">
                                    <div class="progress-icon streak-icon">
                                        <i class="fas fa-fire"></i>
                                    </div>
                                    <span class="progress-label">Daily Streak</span>
                                </div>
                                <span class="progress-value" id="currentStreak">0</span>
                            </div>
                            <div class="progress-bar-container">
                                <div class="progress-bar streak-bar" id="streakBar"></div>
                            </div>
                            <div class="progress-message" id="streakMessage">Start your first day!</div>
                        </div>
                        
                        <!-- Weekly Progress -->
                        <div class="progress-card mb-3">
                            <div class="d-flex align-items-center justify-content-between mb-2">
                                <div class="d-flex align-items-center">
                                    <div class="progress-icon weekly-icon">
                                        <i class="fas fa-chart-line"></i>
                                    </div>
                                    <span class="progress-label">This Week</span>
                                </div>
                                <span class="progress-value" id="weeklyAverage">0%</span>
                            </div>
                            <div class="progress-bar-container">
                                <div class="progress-bar weekly-bar" id="weeklyBar"></div>
                            </div>
                            <div class="progress-message" id="weeklyMessage">Keep going strong!</div>
                        </div>
                        
                        <!-- Total Achievements -->
                        <div class="progress-card">
                            <div class="d-flex align-items-center justify-content-between mb-2">
                                <div class="d-flex align-items-center">
                                    <div class="progress-icon total-icon">
                                        <i class="fas fa-trophy"></i>
                                    </div>
                                    <span class="progress-label">Completed</span>
                                </div>
                                <span class="progress-value" id="totalActivities">0</span>
                            </div>
                            <div class="achievement-level" id="achievementLevel">Beginner</div>
                        </div>
                    </div>

                    <!-- Popular Activities -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="fw-bold mb-0">Activity Library</h6>
                            <button class="text-primary text-decoration-none btn p-0" style="font-size: 12px; border: none; background: none;" onclick="showActivityLibrary()">View All</button>
                        </div>
                        <div id="popularActivities">
                            <!-- Will be populated dynamically -->
                        </div>
                    </div>

                    <!-- Create Custom Activity -->
                    <button class="btn btn-primary w-100 mb-3" onclick="showAddActivityModal('custom')">
                        <i class="fas fa-plus me-1"></i> Create Custom Activity
                    </button>

                    <!-- Admin Panel -->
                    <% if (user && user.role === 'admin') { %>
                    <div class="bg-gradient text-white p-3 rounded" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                        <h6 class="fw-bold mb-3 text-white">Admin Panel</h6>
                        <div class="d-grid gap-2">
                            <a href="/admin" class="btn btn-light btn-sm">
                                <i class="fas fa-users me-1"></i> Manage Users
                            </a>
                            <a href="/admin" class="btn btn-light btn-sm">
                                <i class="fas fa-cog me-1"></i> Manage Activities
                            </a>
                        </div>
                    </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Activity Modal -->
    <div class="modal fade" id="addActivityModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Activity</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addActivityForm">
                        <div class="mb-3">
                            <label for="activitySelect" class="form-label">Choose Activity</label>
                            <select class="form-select" id="activitySelect" name="activityId">
                                <option value="">Loading activities...</option>
                            </select>
                        </div>
                        
                        <!-- Custom Activity Fields -->
                        <div id="customActivityFields" style="display: none;">
                            <div class="mb-3">
                                <label for="customActivityName" class="form-label">Activity Name</label>
                                <input type="text" class="form-control" id="customActivityName" name="customName" placeholder="Enter activity name">
                            </div>
                            <div class="mb-3">
                                <label for="customActivityCategory" class="form-label">Category</label>
                                <select class="form-select" id="customActivityCategory" name="customCategory">
                                    <option value="">Select category</option>
                                    <option value="workout">Workout</option>
                                    <option value="nutrition">Nutrition</option>
                                    <option value="recovery">Recovery</option>
                                    <option value="mindset">Mindset</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="customActivityDescription" class="form-label">Description (Optional)</label>
                                <textarea class="form-control" id="customActivityDescription" name="customDescription" rows="2" placeholder="Add notes or details"></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="timeSlotSelect" class="form-label">Time Slot</label>
                                <select class="form-select" id="timeSlotSelect" name="timeSlot">
                                    <option value="">Select time slot</option>
                                    <option value="morning">Morning</option>
                                    <option value="afternoon">Afternoon</option>
                                    <option value="evening">Evening</option>
                                </select>
                                <div class="form-text">Best for: meditation, breakfast, stretching, goal setting</div>
                            </div>
                        </div>
                        <input type="hidden" id="timeSlot" name="timeSlot">
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="addActivity()">Add Activity</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Set current date
        document.getElementById('currentDate').textContent = new Date().toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadDashboardData();
        });

        function loadDashboardData() {
            // Load today's tracker data
            loadTodayTracker();
            // Load activities for the modal
            loadActivities();
            // Load user stats
            loadStats();
        }

        function loadTodayTracker() {
            fetch('/api/tracker/today')
                .then(response => response.json())
                .then(tracker => {
                    renderTrackerEntries(tracker);
                    updateProgressDisplay();
                })
                .catch(error => console.error('Error loading tracker:', error));
        }

        function renderTrackerEntries(tracker) {
            const morningContainer = document.getElementById('morning-activities');
            const afternoonContainer = document.getElementById('afternoon-activities');
            const eveningContainer = document.getElementById('evening-activities');
            
            // Clear existing content
            morningContainer.innerHTML = '';
            afternoonContainer.innerHTML = '';
            eveningContainer.innerHTML = '';
            
            if (tracker && tracker.entries) {
                // Group entries by time slot
                const entriesByTimeSlot = {
                    morning: tracker.entries.filter(entry => entry.timeSlot === 'morning'),
                    afternoon: tracker.entries.filter(entry => entry.timeSlot === 'afternoon'),
                    evening: tracker.entries.filter(entry => entry.timeSlot === 'evening')
                };
                
                // Render each time slot
                renderTimeSlotActivities('morning', entriesByTimeSlot.morning, morningContainer);
                renderTimeSlotActivities('afternoon', entriesByTimeSlot.afternoon, afternoonContainer);
                renderTimeSlotActivities('evening', entriesByTimeSlot.evening, eveningContainer);
                
                // Update completion counts
                updateTimeSlotCounts('morning', entriesByTimeSlot.morning);
                updateTimeSlotCounts('afternoon', entriesByTimeSlot.afternoon);
                updateTimeSlotCounts('evening', entriesByTimeSlot.evening);
            }
        }

        function renderTimeSlotActivities(timeSlot, entries, container) {
            entries.forEach(entry => {
                const activityHtml = createActivityHTML(entry);
                container.insertAdjacentHTML('beforeend', activityHtml);
            });
        }

        function createActivityHTML(entry) {
            const isCompleted = entry.status === 'completed';
            const completedClass = isCompleted ? 'completed' : '';
            const checkedAttr = isCompleted ? 'checked disabled' : '';
            
            const categoryIcons = {
                workout: 'fas fa-dumbbell',
                nutrition: 'fas fa-apple-alt',
                recovery: 'fas fa-heart',
                mindset: 'fas fa-brain'
            };
            
            const categoryColors = {
                workout: 'workout-icon',
                nutrition: 'nutrition-icon',
                recovery: 'recovery-icon',
                mindset: 'mindset-icon'
            };
            
            const categoryBadges = {
                workout: 'bg-danger',
                nutrition: 'bg-warning',
                recovery: 'bg-info',
                mindset: 'bg-purple'
            };

            return `
                <div class="activity-item ${completedClass}" data-entry-id="${entry.id}">
                    <input type="checkbox" class="activity-checkbox" ${checkedAttr} onchange="toggleActivityStatus(this, ${entry.id})">
                    <div class="activity-icon ${categoryColors[entry.activity.category]}">
                        <i class="${categoryIcons[entry.activity.category]}"></i>
                    </div>
                    <div class="activity-content">
                        <div class="activity-title">${entry.activity.title}</div>
                        <div class="activity-description">${entry.activity.description || ''}</div>
                    </div>
                    <span class="activity-badge ${categoryBadges[entry.activity.category]} text-white">${entry.activity.category.charAt(0).toUpperCase() + entry.activity.category.slice(1)}</span>
                    <button class="btn-delete" onclick="deleteActivity(${entry.id})">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
        }

        function updateTimeSlotCounts(timeSlot, entries) {
            const total = entries.length;
            const completed = entries.filter(entry => entry.status === 'completed').length;
            const badge = document.querySelector(`#${timeSlot}-activities`).closest('.time-slot-section').querySelector('.badge');
            if (badge) {
                badge.textContent = `${completed} of ${total} completed`;
            }
        }

        function loadActivities() {
            fetch('/api/activities')
                .then(response => response.json())
                .then(activities => {
                    populateActivitySelect(activities);
                })
                .catch(error => console.error('Error loading activities:', error));
        }

        function loadStats() {
            fetch('/api/stats')
                .then(response => response.json())
                .then(stats => {
                    console.log('Loaded stats:', stats); // Debug log
                    updateStatsDisplay(stats);
                })
                .catch(error => console.error('Error loading stats:', error));
        }

        function populateActivitySelect(activities) {
            const select = document.getElementById('activitySelect');
            select.innerHTML = '<option value="">Select an activity...</option>';
            
            // Group activities by category
            const categories = {
                workout: [],
                nutrition: [],
                recovery: [],
                mindset: []
            };
            
            activities.forEach(activity => {
                if (categories[activity.category]) {
                    categories[activity.category].push(activity);
                }
            });
            
            // Add optgroups for each category
            Object.keys(categories).forEach(category => {
                if (categories[category].length > 0) {
                    const optgroup = document.createElement('optgroup');
                    optgroup.label = category.charAt(0).toUpperCase() + category.slice(1);
                    
                    categories[category].forEach(activity => {
                        const option = document.createElement('option');
                        option.value = activity.id;
                        option.textContent = activity.title;
                        option.dataset.category = activity.category;
                        option.dataset.description = activity.description;
                        optgroup.appendChild(option);
                    });
                    
                    select.appendChild(optgroup);
                }
            });
            
            // Add custom activity option
            const customOption = document.createElement('option');
            customOption.value = 'custom';
            customOption.textContent = 'Create Custom Activity';
            select.appendChild(customOption);
        }

        function showAddActivityModal(timeSlot) {
            document.getElementById('timeSlot').value = timeSlot;
            
            // Reset form
            document.getElementById('addActivityForm').reset();
            document.getElementById('customActivityFields').style.display = 'none';
            
            // Load activities if not already loaded
            if (document.getElementById('activitySelect').options.length <= 1) {
                loadActivities();
            }
            
            const modal = new bootstrap.Modal(document.getElementById('addActivityModal'));
            modal.show();
        }

        function toggleActivityStatus(checkbox, entryId) {
            const status = checkbox.checked ? 'completed' : 'pending';
            
            fetch(`/api/tracker/entries/${entryId}/status`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status })
            })
            .then(response => response.json())
            .then(data => {
                const activityItem = checkbox.closest('.activity-item');
                if (checkbox.checked) {
                    activityItem.classList.add('completed');
                    checkbox.disabled = true;
                } else {
                    activityItem.classList.remove('completed');
                }
                updateProgressDisplay();
                loadStats(); // Refresh stats when activities completed
            })
            .catch(error => {
                console.error('Error updating activity status:', error);
                // Revert checkbox state on error
                checkbox.checked = !checkbox.checked;
            });
        }

        function deleteActivity(entryId) {
            if (confirm('Are you sure you want to delete this activity?')) {
                fetch(`/api/tracker/entries/${entryId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    loadTodayTracker(); // Reload the tracker data
                    loadStats(); // Refresh stats when activities deleted
                })
                .catch(error => {
                    console.error('Error deleting activity:', error);
                    alert('Error deleting activity');
                });
            }
        }

        function updateProgressDisplay() {
            const totalActivities = document.querySelectorAll('.activity-item').length;
            const completedActivities = document.querySelectorAll('.activity-item.completed').length;
            const percentage = totalActivities > 0 ? Math.round((completedActivities / totalActivities) * 100) : 0;
            
            document.getElementById('completionPercentage').textContent = percentage + '%';
            
            // Update progress circle
            const progressCircle = document.querySelector('.progress-circle');
            const degrees = (percentage / 100) * 360;
            progressCircle.style.background = `conic-gradient(#28a745 0deg ${degrees}deg, #e9ecef ${degrees}deg 360deg)`;
        }

        function updateStatsDisplay(stats) {
            // Update Streak Progress
            const streakElement = document.getElementById('currentStreak');
            const streakBar = document.getElementById('streakBar');
            const streakMessage = document.getElementById('streakMessage');
            
            streakElement.textContent = stats.currentStreak;
            updateStreakProgress(streakBar, stats.currentStreak);
            updateStreakMessage(streakMessage, stats.currentStreak);
            
            // Update Weekly Progress
            const weeklyElement = document.getElementById('weeklyAverage');
            const weeklyBar = document.getElementById('weeklyBar');
            const weeklyMessage = document.getElementById('weeklyMessage');
            
            weeklyElement.textContent = stats.weeklyAverage + '%';
            updateWeeklyProgress(weeklyBar, stats.weeklyAverage);
            updateWeeklyMessage(weeklyMessage, stats.weeklyAverage);
            
            // Update Total Activities
            const totalElement = document.getElementById('totalActivities');
            const achievementLevel = document.getElementById('achievementLevel');
            
            totalElement.textContent = stats.totalActivities;
            updateAchievementLevel(achievementLevel, stats.totalActivities);
            
            // Update subscription status
            updateSubscriptionStatus(stats.currentStreak, stats.totalActivities);
        }

        function updateSubscriptionStatus(streak, totalActivities) {
            const statusElement = document.getElementById('subscriptionStatus');
            
            // Premium logic: 7+ day streak OR 10+ total activities
            if (streak >= 7 || totalActivities >= 10) {
                statusElement.textContent = 'Premium Earned';
                statusElement.className = 'badge bg-success';
            } 
            // Almost Premium: 3+ day streak OR 7+ total activities
            else if (streak >= 3 || totalActivities >= 7) {
                statusElement.textContent = 'Almost Premium';
                statusElement.className = 'badge bg-warning';
            } 
            // Free Plan: Less than thresholds above
            else {
                statusElement.textContent = 'Free Plan';
                statusElement.className = 'badge bg-secondary';
            }
        }

        function updateStreakProgress(bar, streak) {
            // Cap streak visualization at 30 days for the progress bar
            const maxStreak = 30;
            const percentage = Math.min((streak / maxStreak) * 100, 100);
            bar.style.width = percentage + '%';
            
            // Add glow effect for high streaks
            if (streak >= 7) {
                bar.style.animation = 'progressGlow 2s infinite';
            } else {
                bar.style.animation = 'none';
            }
        }

        function updateWeeklyProgress(bar, percentage) {
            bar.style.width = percentage + '%';
            
            // Add glow effect for high performance
            if (percentage >= 80) {
                bar.style.animation = 'progressGlow 2s infinite';
            } else {
                bar.style.animation = 'none';
            }
        }

        function updateStreakMessage(element, streak) {
            if (streak === 0) {
                element.textContent = "Complete an activity to start your streak";
            } else if (streak === 1) {
                element.textContent = "Great start! One day down";
            } else if (streak < 7) {
                element.textContent = `${streak} days strong - keep building!`;
            } else if (streak < 14) {
                element.textContent = `${streak} days - you're on fire!`;
            } else if (streak < 30) {
                element.textContent = `${streak} days - incredible consistency!`;
            } else {
                element.textContent = `${streak} days - you're unstoppable!`;
            }
        }

        function updateWeeklyMessage(element, percentage) {
            if (percentage === 0) {
                element.textContent = "Start your week strong";
            } else if (percentage < 30) {
                element.textContent = "Building momentum this week";
            } else if (percentage < 60) {
                element.textContent = "Good weekly progress";
            } else if (percentage < 85) {
                element.textContent = "Excellent week so far!";
            } else {
                element.textContent = "Outstanding weekly performance!";
            }
        }

        function updateAchievementLevel(element, total) {
            let level = 'Beginner';
            let color = 'linear-gradient(135deg, #95a5a6, #7f8c8d)';
            
            if (total >= 100) {
                level = 'Master';
                color = 'linear-gradient(135deg, #e74c3c, #c0392b)';
            } else if (total >= 50) {
                level = 'Expert';
                color = 'linear-gradient(135deg, #9b59b6, #8e44ad)';
            } else if (total >= 25) {
                level = 'Advanced';
                color = 'linear-gradient(135deg, #3498db, #2980b9)';
            } else if (total >= 10) {
                level = 'Intermediate';
                color = 'linear-gradient(135deg, #2ecc71, #27ae60)';
            } else if (total >= 1) {
                level = 'Starter';
                color = 'linear-gradient(135deg, #f39c12, #e67e22)';
            }
            
            element.textContent = level;
            element.style.background = color;
        }

        // Activity select change handler
        document.getElementById('activitySelect').addEventListener('change', function() {
            const customFields = document.getElementById('customActivityFields');
            const timeSlotSelect = document.getElementById('timeSlotSelect');
            const hiddenTimeSlot = document.getElementById('timeSlot');
            
            if (this.value === 'custom') {
                customFields.style.display = 'block';
                // Set the time slot in the visible select to match the hidden field
                timeSlotSelect.value = hiddenTimeSlot.value;
            } else {
                customFields.style.display = 'none';
            }
        });

        function addActivity() {
            const form = document.getElementById('addActivityForm');
            const activitySelect = document.getElementById('activitySelect');
            const timeSlot = document.getElementById('timeSlot').value;
            
            // Validate form
            if (!activitySelect.value) {
                alert('Please select an activity');
                return;
            }
            
            let data = {
                activityId: activitySelect.value,
                timeSlot: timeSlot
            };
            
            // If custom activity, get custom fields
            if (activitySelect.value === 'custom') {
                const customName = document.getElementById('customActivityName').value;
                const customCategory = document.getElementById('customActivityCategory').value;
                const customDescription = document.getElementById('customActivityDescription').value;
                const customTimeSlot = document.getElementById('timeSlotSelect').value;
                
                if (!customName || !customCategory) {
                    alert('Please fill in activity name and category');
                    return;
                }
                
                data = {
                    activityId: 'custom',
                    customName: customName,
                    customCategory: customCategory,
                    customDescription: customDescription,
                    timeSlot: customTimeSlot || timeSlot
                };
            }
            
            fetch('/api/tracker/add-activity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    bootstrap.Modal.getInstance(document.getElementById('addActivityModal')).hide();
                    loadTodayTracker();
                    form.reset();
                    document.getElementById('customActivityFields').style.display = 'none';
                } else {
                    alert('Error adding activity: ' + result.message);
                }
            })
            .catch(error => {
                console.error('Error adding activity:', error);
                alert('Error adding activity');
            });
        }

        // Load popular activities dynamically
        function loadPopularActivities() {
            fetch('/api/activities')
                .then(response => response.json())
                .then(activities => {
                    const container = document.getElementById('popularActivities');
                    container.innerHTML = '';
                    
                    // Show top 3 most popular activities
                    const popularActivities = activities.slice(0, 3);
                    
                    popularActivities.forEach(activity => {
                        const categoryColors = {
                            workout: 'bg-danger',
                            nutrition: 'bg-warning', 
                            recovery: 'bg-info',
                            mindset: 'bg-success'
                        };
                        
                        const activityHtml = `
                            <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-light rounded activity-library-item">
                                <div class="d-flex align-items-center">
                                    <div class="stat-dot ${categoryColors[activity.category]}"></div>
                                    <span style="font-size: 12px;">${activity.title}</span>
                                </div>
                                <button class="btn-add" onclick="quickAddActivity(${activity.id})" title="Add to today's tracker">+</button>
                            </div>
                        `;
                        container.innerHTML += activityHtml;
                    });
                })
                .catch(error => console.error('Error loading popular activities:', error));
        }

        // Quick add activity from popular list
        function quickAddActivity(activityId) {
            const data = {
                activityId: activityId,
                timeSlot: 'morning' // Default to morning, user can change later
            };
            
            fetch('/api/tracker/add-activity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    loadTodayTracker();
                    showAlert('Activity added to your morning schedule!', 'success');
                } else {
                    showAlert('Error adding activity: ' + result.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error adding activity:', error);
                showAlert('Error adding activity', 'error');
            });
        }

        // Show Activity Library Modal
        function showActivityLibrary() {
            fetch('/api/activities')
                .then(response => response.json())
                .then(activities => {
                    const modalHtml = `
                        <div class="modal fade" id="activityLibraryModal" tabindex="-1">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Activity Library</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="row">
                                            ${generateActivityLibraryContent(activities)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    // Remove existing modal if any
                    const existingModal = document.getElementById('activityLibraryModal');
                    if (existingModal) {
                        existingModal.remove();
                    }
                    
                    // Add new modal to body
                    document.body.insertAdjacentHTML('beforeend', modalHtml);
                    
                    // Show modal
                    const modal = new bootstrap.Modal(document.getElementById('activityLibraryModal'));
                    modal.show();
                })
                .catch(error => console.error('Error loading activity library:', error));
        }

        function generateActivityLibraryContent(activities) {
            const categories = {
                workout: { title: 'Workout', icon: 'fas fa-dumbbell', color: 'danger' },
                nutrition: { title: 'Nutrition', icon: 'fas fa-apple-alt', color: 'warning' },
                recovery: { title: 'Recovery', icon: 'fas fa-heart', color: 'info' },
                mindset: { title: 'Mindset', icon: 'fas fa-brain', color: 'success' }
            };
            
            let content = '';
            
            Object.keys(categories).forEach(categoryKey => {
                const category = categories[categoryKey];
                const categoryActivities = activities.filter(a => a.category === categoryKey);
                
                if (categoryActivities.length > 0) {
                    content += `
                        <div class="col-md-6 mb-4">
                            <div class="card h-100">
                                <div class="card-header bg-${category.color} text-white">
                                    <h6 class="mb-0">
                                        <i class="${category.icon} me-2"></i>${category.title}
                                    </h6>
                                </div>
                                <div class="card-body">
                                    ${categoryActivities.map(activity => `
                                        <div class="d-flex justify-content-between align-items-center mb-2 p-2 border rounded activity-library-item">
                                            <div>
                                                <div class="fw-bold" style="font-size: 14px;">${activity.title}</div>
                                                <div class="text-muted small">${activity.description}</div>
                                            </div>
                                            <button class="btn btn-outline-${category.color} btn-sm" onclick="quickAddActivity(${activity.id})">
                                                Add
                                            </button>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                    `;
                }
            });
            
            return content;
        }

        // Simple alert function
        function showAlert(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999;">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', alertHtml);
            
            // Auto dismiss after 3 seconds
            setTimeout(() => {
                const alert = document.querySelector('.alert');
                if (alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }
            }, 3000);
        }

        // Initialize everything
        loadPopularActivities();
        loadStats();
        updateProgressDisplay();
    </script>
</body>
</html>