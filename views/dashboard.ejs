<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Transcend Your Body</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 25px;
        }
        .progress-circle {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: conic-gradient(#28a745 0deg 154.8deg, #e9ecef 154.8deg 360deg);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }
        .progress-circle::before {
            content: '';
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: white;
            position: absolute;
        }
        .progress-text {
            position: relative;
            z-index: 1;
            font-weight: bold;
            color: #333;
        }
        .time-overview-card {
            background: linear-gradient(135deg, rgba(255,255,255,0.2), rgba(255,255,255,0.1));
            border-radius: 20px;
            padding: 20px;
            text-align: center;
            color: white;
            transition: transform 0.3s ease;
        }
        .time-overview-card:hover {
            transform: translateY(-5px);
        }
        .time-overview-card .time-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: rgba(255,255,255,0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
            font-size: 20px;
        }
        .time-overview-card h6 {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 5px;
        }
        .time-overview-card p {
            font-size: 14px;
            opacity: 0.8;
            margin: 0;
        }
        .time-slot-section {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .time-slot-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        .time-icon {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 10px;
        }
        .morning-icon { background-color: #ffc107; }
        .afternoon-icon { background-color: #17a2b8; }
        .evening-icon { background-color: #6f42c1; }
        .activity-item {
            display: flex;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #f0f0f0;
        }
        .activity-item:last-child {
            border-bottom: none;
        }
        .activity-checkbox {
            margin-right: 12px;
        }
        .activity-icon {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 10px;
            font-size: 12px;
        }
        .workout-icon { background-color: #dc3545; color: white; }
        .nutrition-icon { background-color: #fd7e14; color: white; }
        .recovery-icon { background-color: #20c997; color: white; }
        .mindset-icon { background-color: #6f42c1; color: white; }
        .activity-content {
            flex-grow: 1;
        }
        .activity-title {
            font-weight: 600;
            font-size: 14px;
            margin-bottom: 2px;
        }
        .activity-description {
            color: #6c757d;
            font-size: 12px;
        }
        .activity-badge {
            font-size: 10px;
            padding: 2px 6px;
            border-radius: 10px;
            margin-right: 8px;
        }
        .completed {
            text-decoration: line-through;
            opacity: 0.7;
        }
        .sidebar {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .stat-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }
        .stat-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .btn-add {
            background: none;
            border: none;
            color: #007bff;
            font-size: 12px;
            padding: 0;
        }
        .btn-delete {
            background: none;
            border: none;
            color: #dc3545;
            font-size: 12px;
            padding: 0;
        }
        .add-activity-btn {
            background: linear-gradient(135deg, #007bff, #0056b3);
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
        }
        .logout-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            text-decoration: none;
        }
        .logout-btn:hover {
            background: rgba(255,255,255,0.3);
            color: white;
        }
        
        /* Enhanced dot animations and responsive design */
        @keyframes dotPulse {
            0%, 100% { 
                transform: scale(1) translateY(0px); 
                opacity: 1; 
            }
            50% { 
                transform: scale(1.15) translateY(-2px); 
                opacity: 0.85; 
            }
        }
        
        .animated-dot {
            transition: all 0.3s ease;
        }
        
        .animated-dot:hover {
            transform: scale(1.3) translateY(-3px) !important;
            animation-play-state: paused;
        }
        
        /* Responsive design for dots */
        @media (max-width: 768px) {
            .animated-dot {
                height: 12px !important;
                width: 12px !important;
            }
            
            .dots-container {
                gap: 12px !important;
            }
        }
        
        @media (max-width: 480px) {
            .animated-dot {
                height: 10px !important;
                width: 10px !important;
            }
            
            .dots-container {
                gap: 10px !important;
            }
        }
        
        .achievement-badge, .achievement-badge-large {
            color: white !important;
            border: none !important;
        }
        
        .achievement-badge {
            font-size: 14px;
            padding: 8px 16px;
        }
        
        .achievement-badge-large {
            font-size: 16px;
            padding: 10px 20px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        .achievement-badge.beginner, .achievement-badge-large.beginner { background: #6c757d !important; }
        .achievement-badge.starter, .achievement-badge-large.starter { background: #fd7e14 !important; }
        .achievement-badge.intermediate, .achievement-badge-large.intermediate { background: #198754 !important; }
        .achievement-badge.advanced, .achievement-badge-large.advanced { background: #0d6efd !important; }
        .achievement-badge.expert, .achievement-badge-large.expert { background: #6f42c1 !important; }
        .achievement-badge.master, .achievement-badge-large.master { background: #dc3545 !important; }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Header Section -->
        <div class="header-section position-relative">
            <a href="/logout" class="logout-btn">
                <i class="fas fa-sign-out-alt me-1"></i> Logout
            </a>
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h2 class="mb-1">Welcome back, <%= user.firstName || 'User' %>!</h2>
                    <p class="mb-0 opacity-75">Your Daily Activities - <span id="currentDate"></span></p>
                    <% if (user.role === 'admin') { %>
                        <div class="mt-2">
                            <a href="/admin" class="admin-link me-3" style="color: rgba(255,255,255,0.8); text-decoration: none; font-size: 14px;">
                                <i class="fas fa-users me-1"></i> Manage Users
                            </a>
                            <a href="/admin" onclick="window.location.href='/admin?tab=activities'; return false;" class="admin-link" style="color: rgba(255,255,255,0.8); text-decoration: none; font-size: 14px;">
                                <i class="fas fa-list me-1"></i> Manage Activities
                            </a>
                        </div>
                    <% } %>
                </div>
                <div class="col-md-4 text-end">
                    <div class="progress-circle">
                        <div class="progress-text">
                            <div style="font-size: 18px;" id="completionPercentage">43%</div>
                            <div style="font-size: 10px;">Complete</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Target Audience with Enhanced Dots -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="text-center">
                        <!-- Centered Dots -->
                        <div class="dots-container mb-3" style="display: flex; justify-content: center; align-items: center; gap: 16px;">
                            <span class="animated-dot" style="
                                height: 14px; 
                                width: 14px; 
                                background: linear-gradient(135deg, #ffd700, #ffed4e); 
                                border-radius: 50%; 
                                display: inline-block; 
                                box-shadow: 0 3px 12px rgba(255,215,0,0.5);
                                animation: dotPulse 2s infinite;
                                animation-delay: 0s;
                            "></span>
                            <span class="animated-dot" style="
                                height: 14px; 
                                width: 14px; 
                                background: linear-gradient(135deg, #4ecdc4, #44a08d); 
                                border-radius: 50%; 
                                display: inline-block; 
                                box-shadow: 0 3px 12px rgba(78,205,196,0.5);
                                animation: dotPulse 2s infinite;
                                animation-delay: 0.4s;
                            "></span>
                            <span class="animated-dot" style="
                                height: 14px; 
                                width: 14px; 
                                background: linear-gradient(135deg, #9b59b6, #8e44ad); 
                                border-radius: 50%; 
                                display: inline-block; 
                                box-shadow: 0 3px 12px rgba(155,89,182,0.5);
                                animation: dotPulse 2s infinite;
                                animation-delay: 0.8s;
                            "></span>
                        </div>
                        
                        <!-- Text on separate line -->
                        <p class="text-white-50 mb-0" style="font-size: 15px; font-weight: 300; line-height: 1.4;">
                            Perfect for Fitness Beginners • Busy Professionals • Coaching Clients
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Time Slots Overview -->
        <div class="row g-3 mt-3">
            <div class="col-md-4">
                <div class="time-overview-card morning-card">
                    <div class="time-icon">
                        <i class="fas fa-sun"></i>
                    </div>
                    <h6>Morning</h6>
                    <p>Start Strong</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="time-overview-card afternoon-card">
                    <div class="time-icon">
                        <i class="fas fa-sun"></i>
                    </div>
                    <h6>Afternoon</h6>
                    <p>Stay Active</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="time-overview-card evening-card">
                    <div class="time-icon">
                        <i class="fas fa-moon"></i>
                    </div>
                    <h6>Evening</h6>
                    <p>Recover Well</p>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Main Content -->
            <div class="col-lg-8">
                <!-- Morning Section -->
                <div class="time-slot-section">
                    <div class="time-slot-header">
                        <div class="time-icon morning-icon">
                            <i class="fas fa-sun text-white"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h5 class="mb-0">Morning</h5>
                            <small class="text-muted">Start your day right</small>
                        </div>
                        <span class="badge bg-light text-dark me-2">2 of 4 completed</span>
                        <button class="add-activity-btn" onclick="showAddActivityModal('morning')">
                            + Add Activity
                        </button>
                    </div>
                    <div id="morning-activities">
                        <!-- Activities will be loaded dynamically -->
                    </div>
                </div>

                <!-- Afternoon Section -->
                <div class="time-slot-section">
                    <div class="time-slot-header">
                        <div class="time-icon afternoon-icon">
                            <i class="fas fa-sun text-white"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h5 class="mb-0">Afternoon</h5>
                            <small class="text-muted">Keep the momentum going</small>
                        </div>
                        <span class="badge bg-light text-dark me-2">0 of 2 completed</span>
                        <button class="add-activity-btn" onclick="showAddActivityModal('afternoon')">
                            + Add Activity
                        </button>
                    </div>
                    <div id="afternoon-activities">
                        <!-- Activities will be loaded dynamically -->
                    </div>
                </div>

                <!-- Evening Section -->
                <div class="time-slot-section">
                    <div class="time-slot-header">
                        <div class="time-icon evening-icon">
                            <i class="fas fa-moon text-white"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h5 class="mb-0">Evening</h5>
                            <small class="text-muted">Wind down and recover</small>
                        </div>
                        <span class="badge bg-light text-dark me-2">1 of 2 completed</span>
                        <button class="add-activity-btn" onclick="showAddActivityModal('evening')">
                            + Add Activity
                        </button>
                    </div>
                    <div id="evening-activities">
                        <!-- Activities will be loaded dynamically -->
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-lg-4">
                <div class="sidebar">
                    <!-- Progress Dashboard -->
                    <div class="progress-dashboard mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="fw-bold mb-0">Your Progress</h6>
                            <div id="subscriptionStatus" class="badge bg-secondary">Free Plan</div>
                        </div>
                        
                        <!-- Subscription Logic Explanation -->
                        <div class="subscription-info mb-4 p-3" style="background: linear-gradient(135deg, #f8f9fa, #e9ecef); border-radius: 12px; border-left: 4px solid #007bff;">
                            <h6 class="fw-bold mb-2" style="color: #495057;">🎯 Earn Premium Access</h6>
                            <div class="subscription-tiers">
                                <div class="tier-item mb-2 p-2" style="background: white; border-radius: 8px; border-left: 3px solid #6c757d;">
                                    <div class="d-flex align-items-center mb-1">
                                        <span class="badge bg-secondary me-2" style="font-size: 10px;">Free Plan</span>
                                        <span class="fw-medium" style="font-size: 12px;">Start your journey</span>
                                    </div>
                                    <small class="text-muted d-block">Default starting tier</small>
                                </div>
                                <div class="tier-item mb-2 p-2" style="background: white; border-radius: 8px; border-left: 3px solid #ffc107;">
                                    <div class="d-flex align-items-center mb-1">
                                        <span class="badge bg-warning me-2" style="font-size: 10px;">Almost Premium</span>
                                        <span class="fw-medium" style="font-size: 12px;">Getting close!</span>
                                    </div>
                                    <small class="text-muted d-block">3+ day streak OR 7+ activities</small>
                                </div>
                                <div class="tier-item p-2" style="background: white; border-radius: 8px; border-left: 3px solid #28a745;">
                                    <div class="d-flex align-items-center mb-1">
                                        <span class="badge bg-success me-2" style="font-size: 10px;">Premium Earned</span>
                                        <span class="fw-medium" style="font-size: 12px;">Congratulations!</span>
                                    </div>
                                    <small class="text-muted d-block">7+ day streak OR 10+ activities</small>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Stats Grid -->
                        <div class="row g-3 mb-3">
                            <!-- Streak Progress -->
                            <div class="col-12">
                                <div class="progress-card">
                                    <div class="d-flex align-items-center justify-content-between mb-2">
                                        <div class="d-flex align-items-center">
                                            <div class="progress-icon streak-icon me-2">
                                                <i class="fas fa-fire"></i>
                                            </div>
                                            <div>
                                                <span class="progress-label d-block">Daily Streak</span>
                                                <small class="text-muted">Consecutive active days</small>
                                            </div>
                                        </div>
                                        <span class="progress-value" id="currentStreak">0</span>
                                    </div>
                                    <div class="progress-bar-container">
                                        <div class="progress-bar streak-bar" id="streakBar"></div>
                                    </div>
                                    <div class="progress-message" id="streakMessage">Start your first day!</div>
                                </div>
                            </div>
                            
                            <!-- Weekly and Total in same row -->
                            <div class="col-6">
                                <div class="progress-card h-100">
                                    <div class="d-flex align-items-center justify-content-between mb-2">
                                        <div class="d-flex align-items-center">
                                            <div class="progress-icon weekly-icon me-2">
                                                <i class="fas fa-chart-line"></i>
                                            </div>
                                            <div>
                                                <span class="progress-label d-block">This Week</span>
                                                <small class="text-muted">Average completion</small>
                                            </div>
                                        </div>
                                        <span class="progress-value" id="weeklyAverage">0%</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-6">
                                <div class="progress-card h-100">
                                    <div class="d-flex align-items-center justify-content-between mb-2">
                                        <div class="d-flex align-items-center">
                                            <div class="progress-icon total-icon me-2">
                                                <i class="fas fa-trophy"></i>
                                            </div>
                                            <div>
                                                <span class="progress-label d-block">Completed</span>
                                                <small class="text-muted">Total activities</small>
                                            </div>
                                        </div>
                                        <span class="progress-value" id="totalActivities">0</span>
                            </div>
                            <!-- Achievement Badge - Featured prominently -->
                            <div class="col-12">
                                <div class="achievement-featured-card mb-3" style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border: 2px solid #dee2e6; border-radius: 16px; padding: 20px;">
                                    <div class="text-center">
                                        <div class="achievement-icon-large mb-3" style="width: 60px; height: 60px; margin: 0 auto; background: linear-gradient(135deg, #9c27b0, #673ab7); border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                                            <i class="fas fa-medal" style="font-size: 24px; color: white;"></i>
                                        </div>
                                        <h6 class="fw-bold mb-2" style="color: #495057;">Achievement Level</h6>
                                        <span class="badge achievement-badge-large" id="achievementBadge" style="font-size: 16px; padding: 10px 20px;">Beginner</span>
                                        <p class="text-muted mt-2 mb-0" style="font-size: 12px;">Keep completing activities to level up!</p>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Performance Snapshot Button -->
                            <div class="col-12">
                                <button class="btn btn-primary w-100 mb-3" onclick="generatePerformanceSnapshot()" style="background: linear-gradient(135deg, #007bff, #0056b3); border: none; padding: 12px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,123,255,0.3);">
                                    <i class="fas fa-camera me-2"></i>
                                    <span class="fw-bold">Create Performance Snapshot</span>
                                    <br>
                                    <small class="opacity-75">Share your progress with friends</small>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Popular Activities -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="fw-bold mb-0">Activity Library</h6>
                            <button class="text-primary text-decoration-none btn p-0" style="font-size: 12px; border: none; background: none;" onclick="showActivityLibrary()">View All</button>
                        </div>
                        <div id="popularActivities">
                            <!-- Will be populated dynamically -->
                        </div>
                    </div>

                    <!-- Create Custom Activity -->
                    <button class="btn btn-primary w-100 mb-3" onclick="showAddActivityModal('custom')">
                        <i class="fas fa-plus me-1"></i> Create Custom Activity
                    </button>

                    <!-- Admin Panel -->
                    <% if (user && user.role === 'admin') { %>
                    <div class="bg-gradient text-white p-3 rounded" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                        <h6 class="fw-bold mb-3 text-white">Admin Panel</h6>
                        <div class="d-grid gap-2">
                            <a href="/admin" class="btn btn-light btn-sm">
                                <i class="fas fa-users me-1"></i> Manage Users
                            </a>
                            <a href="/admin" onclick="window.location.href='/admin?tab=activities'; return false;" class="btn btn-light btn-sm">
                                <i class="fas fa-cog me-1"></i> Manage Activities
                            </a>
                        </div>
                    </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Activity Modal -->
    <div class="modal fade" id="addActivityModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Activity</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addActivityForm">
                        <div class="mb-3">
                            <label for="activitySelect" class="form-label">Choose Activity</label>
                            <select class="form-select" id="activitySelect" name="activityId">
                                <option value="">Loading activities...</option>
                            </select>
                        </div>
                        
                        <!-- Custom Activity Fields -->
                        <div id="customActivityFields" style="display: none;">
                            <div class="mb-3">
                                <label for="customActivityName" class="form-label">Activity Name</label>
                                <input type="text" class="form-control" id="customActivityName" name="customName" placeholder="Enter activity name">
                            </div>
                            <div class="mb-3">
                                <label for="customActivityCategory" class="form-label">Category</label>
                                <select class="form-select" id="customActivityCategory" name="customCategory">
                                    <option value="">Select category</option>
                                    <option value="workout">Workout</option>
                                    <option value="nutrition">Nutrition</option>
                                    <option value="recovery">Recovery</option>
                                    <option value="mindset">Mindset</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="customActivityDescription" class="form-label">Description (Optional)</label>
                                <textarea class="form-control" id="customActivityDescription" name="customDescription" rows="2" placeholder="Add notes or details"></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="timeSlotSelect" class="form-label">Time Slot</label>
                                <select class="form-select" id="timeSlotSelect" name="timeSlot">
                                    <option value="">Select time slot</option>
                                    <option value="morning">Morning</option>
                                    <option value="afternoon">Afternoon</option>
                                    <option value="evening">Evening</option>
                                </select>
                                <div class="form-text">Best for: meditation, breakfast, stretching, goal setting</div>
                            </div>
                        </div>
                        <input type="hidden" id="timeSlot" name="timeSlot">
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="addActivity()">Add Activity</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Set current date
        document.getElementById('currentDate').textContent = new Date().toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadDashboardData();
        });

        function loadDashboardData() {
            // Load today's tracker data
            loadTodayTracker();
            // Load activities for the modal
            loadActivities();
            // Load user stats
            loadStats();
        }

        function loadTodayTracker() {
            fetch('/api/tracker/today')
                .then(response => response.json())
                .then(tracker => {
                    renderTrackerEntries(tracker);
                    updateProgressDisplay();
                })
                .catch(error => console.error('Error loading tracker:', error));
        }

        function renderTrackerEntries(tracker) {
            const morningContainer = document.getElementById('morning-activities');
            const afternoonContainer = document.getElementById('afternoon-activities');
            const eveningContainer = document.getElementById('evening-activities');
            
            // Clear existing content
            morningContainer.innerHTML = '';
            afternoonContainer.innerHTML = '';
            eveningContainer.innerHTML = '';
            
            if (tracker && tracker.entries) {
                // Group entries by time slot
                const entriesByTimeSlot = {
                    morning: tracker.entries.filter(entry => entry.timeSlot === 'morning'),
                    afternoon: tracker.entries.filter(entry => entry.timeSlot === 'afternoon'),
                    evening: tracker.entries.filter(entry => entry.timeSlot === 'evening')
                };
                
                // Render each time slot
                renderTimeSlotActivities('morning', entriesByTimeSlot.morning, morningContainer);
                renderTimeSlotActivities('afternoon', entriesByTimeSlot.afternoon, afternoonContainer);
                renderTimeSlotActivities('evening', entriesByTimeSlot.evening, eveningContainer);
                
                // Update completion counts
                updateTimeSlotCounts('morning', entriesByTimeSlot.morning);
                updateTimeSlotCounts('afternoon', entriesByTimeSlot.afternoon);
                updateTimeSlotCounts('evening', entriesByTimeSlot.evening);
            }
        }

        function renderTimeSlotActivities(timeSlot, entries, container) {
            entries.forEach(entry => {
                const activityHtml = createActivityHTML(entry);
                container.insertAdjacentHTML('beforeend', activityHtml);
            });
        }

        function createActivityHTML(entry) {
            const isCompleted = entry.status === 'completed';
            const completedClass = isCompleted ? 'completed' : '';
            const checkedAttr = isCompleted ? 'checked' : '';
            
            const categoryIcons = {
                workout: 'fas fa-dumbbell',
                nutrition: 'fas fa-apple-alt',
                recovery: 'fas fa-heart',
                mindset: 'fas fa-brain'
            };
            
            const categoryColors = {
                workout: 'workout-icon',
                nutrition: 'nutrition-icon',
                recovery: 'recovery-icon',
                mindset: 'mindset-icon'
            };
            
            const categoryBadges = {
                workout: 'bg-danger',
                nutrition: 'bg-warning',
                recovery: 'bg-info',
                mindset: 'bg-purple'
            };

            return `
                <div class="activity-item ${completedClass}" data-entry-id="${entry.id}">
                    <input type="checkbox" class="activity-checkbox" ${checkedAttr} onchange="toggleActivityStatus(this, ${entry.id})">
                    <div class="activity-icon ${categoryColors[entry.activity.category]}">
                        <i class="${categoryIcons[entry.activity.category]}"></i>
                    </div>
                    <div class="activity-content">
                        <div class="activity-title">${entry.activity.title}</div>
                        <div class="activity-description">${entry.activity.description || ''}</div>
                    </div>
                    <span class="activity-badge ${categoryBadges[entry.activity.category]} text-white">${entry.activity.category.charAt(0).toUpperCase() + entry.activity.category.slice(1)}</span>
                    <button class="btn-delete" onclick="deleteActivity(${entry.id})">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
        }

        function updateTimeSlotCounts(timeSlot, entries) {
            const total = entries.length;
            const completed = entries.filter(entry => entry.status === 'completed').length;
            const badge = document.querySelector(`#${timeSlot}-activities`).closest('.time-slot-section').querySelector('.badge');
            if (badge) {
                badge.textContent = `${completed} of ${total} completed`;
            }
        }

        function loadActivities() {
            fetch('/api/activities')
                .then(response => response.json())
                .then(activities => {
                    populateActivitySelect(activities);
                })
                .catch(error => console.error('Error loading activities:', error));
        }

        function loadStats() {
            fetch('/api/stats')
                .then(response => response.json())
                .then(stats => {
                    console.log('Loaded stats:', stats); // Debug log
                    updateStatsDisplay(stats);
                })
                .catch(error => console.error('Error loading stats:', error));
        }

        function populateActivitySelect(activities) {
            const select = document.getElementById('activitySelect');
            select.innerHTML = '<option value="">Select an activity...</option>';
            
            // Group activities by category
            const categories = {
                workout: [],
                nutrition: [],
                recovery: [],
                mindset: []
            };
            
            activities.forEach(activity => {
                if (categories[activity.category]) {
                    categories[activity.category].push(activity);
                }
            });
            
            // Add optgroups for each category
            Object.keys(categories).forEach(category => {
                if (categories[category].length > 0) {
                    const optgroup = document.createElement('optgroup');
                    optgroup.label = category.charAt(0).toUpperCase() + category.slice(1);
                    
                    categories[category].forEach(activity => {
                        const option = document.createElement('option');
                        option.value = activity.id;
                        option.textContent = activity.title;
                        option.dataset.category = activity.category;
                        option.dataset.description = activity.description;
                        optgroup.appendChild(option);
                    });
                    
                    select.appendChild(optgroup);
                }
            });
            
            // Add custom activity option
            const customOption = document.createElement('option');
            customOption.value = 'custom';
            customOption.textContent = 'Create Custom Activity';
            select.appendChild(customOption);
        }

        function showAddActivityModal(timeSlot) {
            document.getElementById('timeSlot').value = timeSlot;
            
            // Reset form
            document.getElementById('addActivityForm').reset();
            document.getElementById('customActivityFields').style.display = 'none';
            
            // Load activities if not already loaded
            if (document.getElementById('activitySelect').options.length <= 1) {
                loadActivities();
            }
            
            const modal = new bootstrap.Modal(document.getElementById('addActivityModal'));
            modal.show();
        }

        function toggleActivityStatus(checkbox, entryId) {
            const status = checkbox.checked ? 'completed' : 'pending';
            
            fetch(`/api/tracker/entries/${entryId}/status`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status })
            })
            .then(response => response.json())
            .then(data => {
                const activityItem = checkbox.closest('.activity-item');
                if (checkbox.checked) {
                    activityItem.classList.add('completed');
                } else {
                    activityItem.classList.remove('completed');
                }
                updateProgressDisplay();
                loadStats(); // Refresh stats when activities completed
            })
            .catch(error => {
                console.error('Error updating activity status:', error);
                // Revert checkbox state on error
                checkbox.checked = !checkbox.checked;
            });
        }

        function deleteActivity(entryId) {
            if (confirm('Are you sure you want to delete this activity?')) {
                fetch(`/api/tracker/entries/${entryId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    loadTodayTracker(); // Reload the tracker data
                    loadStats(); // Refresh stats when activities deleted
                })
                .catch(error => {
                    console.error('Error deleting activity:', error);
                    alert('Error deleting activity');
                });
            }
        }

        function updateProgressDisplay() {
            const totalActivities = document.querySelectorAll('.activity-item').length;
            const completedActivities = document.querySelectorAll('.activity-item.completed').length;
            const percentage = totalActivities > 0 ? Math.round((completedActivities / totalActivities) * 100) : 0;
            
            document.getElementById('completionPercentage').textContent = percentage + '%';
            
            // Update progress circle
            const progressCircle = document.querySelector('.progress-circle');
            const degrees = (percentage / 100) * 360;
            progressCircle.style.background = `conic-gradient(#28a745 0deg ${degrees}deg, #e9ecef ${degrees}deg 360deg)`;
        }

        function updateStatsDisplay(stats) {
            // Update Streak Progress
            const streakElement = document.getElementById('currentStreak');
            const streakBar = document.getElementById('streakBar');
            const streakMessage = document.getElementById('streakMessage');
            
            streakElement.textContent = stats.currentStreak;
            updateStreakProgress(streakBar, stats.currentStreak);
            updateStreakMessage(streakMessage, stats.currentStreak);
            
            // Update Weekly Progress
            const weeklyElement = document.getElementById('weeklyAverage');
            const weeklyBar = document.getElementById('weeklyBar');
            const weeklyMessage = document.getElementById('weeklyMessage');
            
            weeklyElement.textContent = stats.weeklyAverage + '%';
            updateWeeklyProgress(weeklyBar, stats.weeklyAverage);
            updateWeeklyMessage(weeklyMessage, stats.weeklyAverage);
            
            // Update Total Activities
            const totalElement = document.getElementById('totalActivities');
            totalElement.textContent = stats.totalActivities;
            
            // Update Achievement Badge (prominently featured)
            const achievementLevel = getAchievementLevel(stats.totalActivities || 0);
            const achievementBadge = document.getElementById('achievementBadge');
            if (achievementBadge) {
                achievementBadge.textContent = achievementLevel;
                achievementBadge.className = `badge achievement-badge-large ${achievementLevel.toLowerCase()}`;
            }
            
            // Update subscription status
            updateSubscriptionStatus(stats.currentStreak, stats.totalActivities);
        }

        function getAchievementLevel(totalActivities) {
            if (totalActivities >= 100) return 'Master';
            if (totalActivities >= 50) return 'Expert';
            if (totalActivities >= 25) return 'Advanced';
            if (totalActivities >= 10) return 'Intermediate';
            if (totalActivities >= 1) return 'Starter';
            return 'Beginner';
        }

        // Performance Snapshot Feature
        async function generatePerformanceSnapshot() {
            try {
                // Show loading state
                const button = event.target.closest('button');
                const originalHTML = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Generating...';
                button.disabled = true;

                // Get current stats
                const response = await fetch('/api/stats');
                const stats = await response.json();
                
                // Create snapshot canvas
                const canvas = await createSnapshotCanvas(stats);
                
                // Convert to blob and trigger download
                canvas.toBlob((blob) => {
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `fitness-progress-${new Date().toISOString().split('T')[0]}.png`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                    
                    // Also show share modal
                    showShareModal(canvas.toDataURL());
                    
                    // Reset button
                    button.innerHTML = originalHTML;
                    button.disabled = false;
                });
                
            } catch (error) {
                console.error('Error generating snapshot:', error);
                alert('Failed to generate snapshot. Please try again.');
                
                // Reset button
                const button = event.target.closest('button');
                button.innerHTML = originalHTML;
                button.disabled = false;
            }
        }

        async function createSnapshotCanvas(stats) {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // Set canvas size (Instagram story format)
            canvas.width = 1080;
            canvas.height = 1920;
            
            // Create gradient background
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, '#667eea');
            gradient.addColorStop(1, '#764ba2');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Add brand header
            ctx.fillStyle = 'rgba(255,255,255,0.15)';
            ctx.fillRect(0, 0, canvas.width, 200);
            
            ctx.fillStyle = 'white';
            ctx.font = 'bold 48px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('Transcend Your Body', canvas.width/2, 100);
            
            ctx.font = '32px Arial';
            ctx.fillStyle = 'rgba(255,255,255,0.8)';
            ctx.fillText('Daily Fitness Tracker', canvas.width/2, 150);
            
            // Add date
            const today = new Date().toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
            ctx.font = '28px Arial';
            ctx.fillText(today, canvas.width/2, 300);
            
            // Achievement Level (prominent)
            const achievementLevel = getAchievementLevel(stats.totalActivities);
            const achievementColor = getAchievementColor(achievementLevel);
            
            // Achievement badge background
            ctx.fillStyle = achievementColor;
            ctx.beginPath();
            ctx.roundRect(canvas.width/2 - 200, 400, 400, 120, 60);
            ctx.fill();
            
            ctx.fillStyle = 'white';
            ctx.font = 'bold 42px Arial';
            ctx.fillText(achievementLevel, canvas.width/2, 445);
            ctx.font = '28px Arial';
            ctx.fillText('Achievement Level', canvas.width/2, 485);
            
            // Stats cards
            const cardY = 600;
            const cardWidth = 300;
            const cardHeight = 180;
            const cardSpacing = 390;
            
            // Streak card
            drawStatCard(ctx, canvas.width/2 - cardSpacing, cardY, cardWidth, cardHeight, 
                        stats.currentStreak, 'Day Streak', '#ff6b6b', '🔥');
            
            // Weekly average card
            drawStatCard(ctx, canvas.width/2, cardY, cardWidth, cardHeight, 
                        stats.weeklyAverage + '%', 'Weekly Avg', '#4ecdc4', '📊');
            
            // Total activities card
            drawStatCard(ctx, canvas.width/2 + cardSpacing, cardY, cardWidth, cardHeight, 
                        stats.totalActivities, 'Completed', '#ffd93d', '🏆');
            
            // Progress message
            ctx.fillStyle = 'white';
            ctx.font = '36px Arial';
            ctx.textAlign = 'center';
            const message = getMotivationalMessage(stats);
            ctx.fillText(message, canvas.width/2, 1000);
            
            // Subscription status
            const subscriptionStatus = getSubscriptionStatus(stats.currentStreak, stats.totalActivities);
            const statusColor = subscriptionStatus === 'Premium Earned' ? '#28a745' : 
                               subscriptionStatus === 'Almost Premium' ? '#ffc107' : '#6c757d';
            
            ctx.fillStyle = statusColor;
            ctx.beginPath();
            ctx.roundRect(canvas.width/2 - 150, 1100, 300, 80, 40);
            ctx.fill();
            
            ctx.fillStyle = 'white';
            ctx.font = 'bold 32px Arial';
            ctx.fillText(subscriptionStatus, canvas.width/2, 1155);
            
            // Call to action
            ctx.fillStyle = 'rgba(255,255,255,0.8)';
            ctx.font = '28px Arial';
            ctx.fillText('Join the journey at TranscendYourBody.com', canvas.width/2, 1300);
            
            // QR code placeholder (simple pattern)
            ctx.fillStyle = 'white';
            ctx.fillRect(canvas.width/2 - 100, 1400, 200, 200);
            ctx.fillStyle = '#333';
            ctx.font = '24px Arial';
            ctx.fillText('Scan to Join', canvas.width/2, 1520);
            
            // Social media handles
            ctx.fillStyle = 'rgba(255,255,255,0.7)';
            ctx.font = '24px Arial';
            ctx.fillText('@TranscendYourBody', canvas.width/2, 1700);
            
            return canvas;
        }

        function drawStatCard(ctx, x, y, width, height, value, label, color, emoji) {
            // Card background
            ctx.fillStyle = 'rgba(255,255,255,0.15)';
            ctx.beginPath();
            ctx.roundRect(x - width/2, y, width, height, 20);
            ctx.fill();
            
            // Accent line
            ctx.fillStyle = color;
            ctx.fillRect(x - width/2, y, width, 8);
            
            // Emoji
            ctx.font = '48px Arial';
            ctx.fillText(emoji, x, y + 60);
            
            // Value
            ctx.fillStyle = 'white';
            ctx.font = 'bold 42px Arial';
            ctx.textAlign = 'center';
            ctx.fillText(value, x, y + 110);
            
            // Label
            ctx.font = '24px Arial';
            ctx.fillStyle = 'rgba(255,255,255,0.8)';
            ctx.fillText(label, x, y + 145);
        }

        function getAchievementColor(level) {
            const colors = {
                'Beginner': '#6c757d',
                'Starter': '#fd7e14',
                'Intermediate': '#198754',
                'Advanced': '#0d6efd',
                'Expert': '#6f42c1',
                'Master': '#dc3545'
            };
            return colors[level] || '#6c757d';
        }

        function getMotivationalMessage(stats) {
            if (stats.totalActivities >= 100) return "Fitness Master! 💪";
            if (stats.totalActivities >= 50) return "Expert Level Achieved! 🌟";
            if (stats.totalActivities >= 25) return "Advanced Warrior! ⚡";
            if (stats.totalActivities >= 10) return "Intermediate Achiever! 🎯";
            if (stats.totalActivities >= 1) return "Getting Started! 🚀";
            return "Ready to Begin! 💫";
        }

        function getSubscriptionStatus(streak, totalActivities) {
            if (streak >= 7 || totalActivities >= 10) return 'Premium Earned';
            if (streak >= 3 || totalActivities >= 7) return 'Almost Premium';
            return 'Free Plan';
        }

        function showShareModal(imageDataURL) {
            // Create modal overlay
            const modal = document.createElement('div');
            modal.className = 'modal fade show';
            modal.style.display = 'block';
            modal.style.backgroundColor = 'rgba(0,0,0,0.5)';
            
            modal.innerHTML = `
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                <i class="fas fa-share-alt me-2"></i>Share Your Progress
                            </h5>
                            <button type="button" class="btn-close" onclick="this.closest('.modal').remove()"></button>
                        </div>
                        <div class="modal-body text-center">
                            <img src="${imageDataURL}" class="img-fluid mb-3" style="max-height: 400px; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.1);">
                            
                            <div class="row g-2">
                                <div class="col-md-6">
                                    <button class="btn btn-primary w-100" onclick="shareToSocial('facebook', '${imageDataURL}')">
                                        <i class="fab fa-facebook me-2"></i>Facebook
                                    </button>
                                </div>
                                <div class="col-md-6">
                                    <button class="btn btn-info w-100" onclick="shareToSocial('twitter', '${imageDataURL}')">
                                        <i class="fab fa-twitter me-2"></i>Twitter
                                    </button>
                                </div>
                                <div class="col-md-6">
                                    <button class="btn btn-gradient w-100" onclick="shareToSocial('instagram', '${imageDataURL}')" style="background: linear-gradient(45deg, #f09433 0%,#e6683c 25%,#dc2743 50%,#cc2366 75%,#bc1888 100%); color: white; border: none;">
                                        <i class="fab fa-instagram me-2"></i>Instagram
                                    </button>
                                </div>
                                <div class="col-md-6">
                                    <button class="btn btn-success w-100" onclick="shareToSocial('whatsapp', '${imageDataURL}')">
                                        <i class="fab fa-whatsapp me-2"></i>WhatsApp
                                    </button>
                                </div>
                            </div>
                            
                            <div class="mt-3">
                                <button class="btn btn-outline-secondary" onclick="copyImageToClipboard('${imageDataURL}')">
                                    <i class="fas fa-copy me-2"></i>Copy to Clipboard
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
        }

        function shareToSocial(platform, imageDataURL) {
            const text = "Check out my fitness progress with Transcend Your Body! 💪 #FitnessJourney #TranscendYourBody";
            const url = window.location.origin;
            
            switch(platform) {
                case 'facebook':
                    window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`, '_blank');
                    break;
                case 'twitter':
                    window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`, '_blank');
                    break;
                case 'instagram':
                    alert('Save the image and share it on Instagram! The image has been downloaded to your device.');
                    break;
                case 'whatsapp':
                    window.open(`https://wa.me/?text=${encodeURIComponent(text + ' ' + url)}`, '_blank');
                    break;
            }
        }

        async function copyImageToClipboard(imageDataURL) {
            try {
                const response = await fetch(imageDataURL);
                const blob = await response.blob();
                await navigator.clipboard.write([
                    new ClipboardItem({ 'image/png': blob })
                ]);
                alert('Image copied to clipboard!');
            } catch (error) {
                console.error('Failed to copy image:', error);
                alert('Failed to copy image. Please download it instead.');
            }
        }

        // Add roundRect polyfill for older browsers
        if (!CanvasRenderingContext2D.prototype.roundRect) {
            CanvasRenderingContext2D.prototype.roundRect = function(x, y, width, height, radius) {
                this.beginPath();
                this.moveTo(x + radius, y);
                this.lineTo(x + width - radius, y);
                this.quadraticCurveTo(x + width, y, x + width, y + radius);
                this.lineTo(x + width, y + height - radius);
                this.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
                this.lineTo(x + radius, y + height);
                this.quadraticCurveTo(x, y + height, x, y + height - radius);
                this.lineTo(x, y + radius);
                this.quadraticCurveTo(x, y, x + radius, y);
                this.closePath();
            }
        }

        function updateSubscriptionStatus(streak, totalActivities) {
            const statusElement = document.getElementById('subscriptionStatus');
            
            // Premium logic: 7+ day streak OR 10+ total activities
            if (streak >= 7 || totalActivities >= 10) {
                statusElement.textContent = 'Premium Earned';
                statusElement.className = 'badge bg-success';
            } 
            // Almost Premium: 3+ day streak OR 7+ total activities
            else if (streak >= 3 || totalActivities >= 7) {
                statusElement.textContent = 'Almost Premium';
                statusElement.className = 'badge bg-warning';
            } 
            // Free Plan: Less than thresholds above
            else {
                statusElement.textContent = 'Free Plan';
                statusElement.className = 'badge bg-secondary';
            }
        }

        function updateStreakProgress(bar, streak) {
            // Cap streak visualization at 30 days for the progress bar
            const maxStreak = 30;
            const percentage = Math.min((streak / maxStreak) * 100, 100);
            bar.style.width = percentage + '%';
            
            // Add glow effect for high streaks
            if (streak >= 7) {
                bar.style.animation = 'progressGlow 2s infinite';
            } else {
                bar.style.animation = 'none';
            }
        }

        function updateWeeklyProgress(bar, percentage) {
            bar.style.width = percentage + '%';
            
            // Add glow effect for high performance
            if (percentage >= 80) {
                bar.style.animation = 'progressGlow 2s infinite';
            } else {
                bar.style.animation = 'none';
            }
        }

        function updateStreakMessage(element, streak) {
            if (streak === 0) {
                element.textContent = "Complete an activity to start your streak";
            } else if (streak === 1) {
                element.textContent = "Great start! One day down";
            } else if (streak < 7) {
                element.textContent = `${streak} days strong - keep building!`;
            } else if (streak < 14) {
                element.textContent = `${streak} days - you're on fire!`;
            } else if (streak < 30) {
                element.textContent = `${streak} days - incredible consistency!`;
            } else {
                element.textContent = `${streak} days - you're unstoppable!`;
            }
        }

        function updateWeeklyMessage(element, percentage) {
            if (percentage === 0) {
                element.textContent = "Start your week strong";
            } else if (percentage < 30) {
                element.textContent = "Building momentum this week";
            } else if (percentage < 60) {
                element.textContent = "Good weekly progress";
            } else if (percentage < 85) {
                element.textContent = "Excellent week so far!";
            } else {
                element.textContent = "Outstanding weekly performance!";
            }
        }

        function updateAchievementLevel(element, total) {
            let level = 'Beginner';
            let color = 'linear-gradient(135deg, #95a5a6, #7f8c8d)';
            
            if (total >= 100) {
                level = 'Master';
                color = 'linear-gradient(135deg, #e74c3c, #c0392b)';
            } else if (total >= 50) {
                level = 'Expert';
                color = 'linear-gradient(135deg, #9b59b6, #8e44ad)';
            } else if (total >= 25) {
                level = 'Advanced';
                color = 'linear-gradient(135deg, #3498db, #2980b9)';
            } else if (total >= 10) {
                level = 'Intermediate';
                color = 'linear-gradient(135deg, #2ecc71, #27ae60)';
            } else if (total >= 1) {
                level = 'Starter';
                color = 'linear-gradient(135deg, #f39c12, #e67e22)';
            }
            
            element.textContent = level;
            element.style.background = color;
        }

        // Activity select change handler
        document.getElementById('activitySelect').addEventListener('change', function() {
            const customFields = document.getElementById('customActivityFields');
            const timeSlotSelect = document.getElementById('timeSlotSelect');
            const hiddenTimeSlot = document.getElementById('timeSlot');
            
            if (this.value === 'custom') {
                customFields.style.display = 'block';
                // Set the time slot in the visible select to match the hidden field
                timeSlotSelect.value = hiddenTimeSlot.value;
            } else {
                customFields.style.display = 'none';
            }
        });

        function addActivity() {
            const form = document.getElementById('addActivityForm');
            const activitySelect = document.getElementById('activitySelect');
            const timeSlot = document.getElementById('timeSlot').value;
            
            // Validate form
            if (!activitySelect.value) {
                alert('Please select an activity');
                return;
            }
            
            let data = {
                activityId: activitySelect.value,
                timeSlot: timeSlot
            };
            
            // If custom activity, get custom fields
            if (activitySelect.value === 'custom') {
                const customName = document.getElementById('customActivityName').value;
                const customCategory = document.getElementById('customActivityCategory').value;
                const customDescription = document.getElementById('customActivityDescription').value;
                const customTimeSlot = document.getElementById('timeSlotSelect').value;
                
                if (!customName || !customCategory) {
                    alert('Please fill in activity name and category');
                    return;
                }
                
                data = {
                    activityId: 'custom',
                    customName: customName,
                    customCategory: customCategory,
                    customDescription: customDescription,
                    timeSlot: customTimeSlot || timeSlot
                };
            }
            
            fetch('/api/tracker/add-activity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    bootstrap.Modal.getInstance(document.getElementById('addActivityModal')).hide();
                    loadTodayTracker();
                    form.reset();
                    document.getElementById('customActivityFields').style.display = 'none';
                } else {
                    alert('Error adding activity: ' + result.message);
                }
            })
            .catch(error => {
                console.error('Error adding activity:', error);
                alert('Error adding activity');
            });
        }

        // Load popular activities dynamically
        function loadPopularActivities() {
            fetch('/api/activities')
                .then(response => response.json())
                .then(activities => {
                    const container = document.getElementById('popularActivities');
                    container.innerHTML = '';
                    
                    // Show top 3 most popular activities
                    const popularActivities = activities.slice(0, 3);
                    
                    popularActivities.forEach(activity => {
                        const categoryColors = {
                            workout: 'bg-danger',
                            nutrition: 'bg-warning', 
                            recovery: 'bg-info',
                            mindset: 'bg-success'
                        };
                        
                        const activityHtml = `
                            <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-light rounded activity-library-item">
                                <div class="d-flex align-items-center">
                                    <div class="stat-dot ${categoryColors[activity.category]}"></div>
                                    <span style="font-size: 12px;">${activity.title}</span>
                                </div>
                                <button class="btn-add" onclick="quickAddActivity(${activity.id})" title="Add to today's tracker">+</button>
                            </div>
                        `;
                        container.innerHTML += activityHtml;
                    });
                })
                .catch(error => console.error('Error loading popular activities:', error));
        }

        // Quick add activity from popular list
        function quickAddActivity(activityId) {
            const data = {
                activityId: activityId,
                timeSlot: 'morning' // Default to morning, user can change later
            };
            
            fetch('/api/tracker/add-activity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    loadTodayTracker();
                    showAlert('Activity added to your morning schedule!', 'success');
                } else {
                    showAlert('Error adding activity: ' + result.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error adding activity:', error);
                showAlert('Error adding activity', 'error');
            });
        }

        // Show Activity Library Modal
        function showActivityLibrary() {
            fetch('/api/activities')
                .then(response => response.json())
                .then(activities => {
                    const modalHtml = `
                        <div class="modal fade" id="activityLibraryModal" tabindex="-1">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Activity Library</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="row">
                                            ${generateActivityLibraryContent(activities)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    // Remove existing modal if any
                    const existingModal = document.getElementById('activityLibraryModal');
                    if (existingModal) {
                        existingModal.remove();
                    }
                    
                    // Add new modal to body
                    document.body.insertAdjacentHTML('beforeend', modalHtml);
                    
                    // Show modal
                    const modal = new bootstrap.Modal(document.getElementById('activityLibraryModal'));
                    modal.show();
                })
                .catch(error => console.error('Error loading activity library:', error));
        }

        function generateActivityLibraryContent(activities) {
            const categories = {
                workout: { title: 'Workout', icon: 'fas fa-dumbbell', color: 'danger' },
                nutrition: { title: 'Nutrition', icon: 'fas fa-apple-alt', color: 'warning' },
                recovery: { title: 'Recovery', icon: 'fas fa-heart', color: 'info' },
                mindset: { title: 'Mindset', icon: 'fas fa-brain', color: 'success' }
            };
            
            let content = '';
            
            Object.keys(categories).forEach(categoryKey => {
                const category = categories[categoryKey];
                const categoryActivities = activities.filter(a => a.category === categoryKey);
                
                if (categoryActivities.length > 0) {
                    content += `
                        <div class="col-md-6 mb-4">
                            <div class="card h-100">
                                <div class="card-header bg-${category.color} text-white">
                                    <h6 class="mb-0">
                                        <i class="${category.icon} me-2"></i>${category.title}
                                    </h6>
                                </div>
                                <div class="card-body">
                                    ${categoryActivities.map(activity => `
                                        <div class="d-flex justify-content-between align-items-center mb-2 p-2 border rounded activity-library-item">
                                            <div>
                                                <div class="fw-bold" style="font-size: 14px;">${activity.title}</div>
                                                <div class="text-muted small">${activity.description}</div>
                                            </div>
                                            <button class="btn btn-outline-${category.color} btn-sm" onclick="quickAddActivity(${activity.id})">
                                                Add
                                            </button>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                    `;
                }
            });
            
            return content;
        }

        // Simple alert function
        function showAlert(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999;">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', alertHtml);
            
            // Auto dismiss after 3 seconds
            setTimeout(() => {
                const alert = document.querySelector('.alert');
                if (alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }
            }, 3000);
        }

        // Initialize everything
        loadPopularActivities();
        loadStats();
        updateProgressDisplay();
    </script>
</body>
</html>